// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.PermissionSchemesModule.CreatePermissionSchemePermissionSchemesPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class DuplicateSchemeValidator : FlexiBusinessRuleBase, IFlexiBusinessRule<CreatePermissionSchemeDataPacket>
    {
        public override string Id { get; set; } = "3a1947f7a625910b0e1a6b0c52a4eb4e";
        public override string FriendlyName { get; set; } = "CheckForDuplicateScheme";

        protected readonly ILogger<DuplicateSchemeValidator> _logger;
        protected readonly RepoFactory _repoFactory;
        private readonly IPermissionSchemeRepository _permissionSchemeRepository;
        public DuplicateSchemeValidator(ILogger<DuplicateSchemeValidator> logger, RepoFactory repoFactory, IPermissionSchemeRepository permissionSchemeRepository)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _permissionSchemeRepository = permissionSchemeRepository;
        }

        /// <summary>
        /// Validates the creation of a new permission scheme by checking for duplicate scheme names.
        /// If a scheme with the same name exists, an error is added to the validation packet.
        /// </summary>
        /// <param name="packet">The data packet containing the DTO and validation error collection.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public virtual async Task Validate(CreatePermissionSchemeDataPacket packet)
        {
            // Initialize repository with packet DTO
            _repoFactory.Init(packet.Dto);

            // Check if a PermissionScheme with the same name already exists in the database
            var existingSchemes = await _permissionSchemeRepository.GetSchemeByNameAsync(packet.Dto.GetAppContext(),packet.Dto.Name);

            if (existingSchemes.Any())
            {
                packet.AddError("Error", $"Permission scheme '{packet.Dto.Name}' already exists.");
            }

        }


    }
}
