// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.CommunicationModule.AddTriggerCommunicationPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckForDuplicateActiveTrigger : FlexiBusinessRuleBase, IFlexiBusinessRule<UpdateTriggerStatusDataPacket>
    {
        public override string Id { get; set; } = "3a1a71238d1bde8dab69b17ced17e9fa";
        public override string FriendlyName { get; set; } = "CheckForDuplicateActiveTrigger";

        protected readonly ILogger<CheckForDuplicateActiveTrigger> _logger;
        protected readonly RepoFactory _repoFactory;

        public CheckForDuplicateActiveTrigger(ILogger<CheckForDuplicateActiveTrigger> logger, RepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(UpdateTriggerStatusDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);

            if (packet.Dto.IsActive == true)
            {

                var triggerDetail = await _repoFactory.GetRepo().FindAll<CommunicationTrigger>()
                                                .ByTriggersId(packet.Dto.Id)
                                                .FirstOrDefaultAsync();
                if (triggerDetail != null)
                {

                    var TemplateTypeExists = await _repoFactory.GetRepo().FindAll<CommunicationTrigger>()
                                                    .ByTriggerType(triggerDetail.TriggerTypeId)
                                                    .ByTriggerDaysOffset(triggerDetail.DaysOffset)
                                                    .ByActiveCommunicationTrigger()
                                                    .ByExcludeTriggersId(packet.Dto.Id)
                                                    .FirstOrDefaultAsync();
                    if (TemplateTypeExists != null)
                    {
                        packet.AddError("Error", "A trigger with same value of " + triggerDetail.DaysOffset + " exists for this trigger type in active state.");
                    }
                }
                else
                {
                    packet.AddError("Error", "Invalid Id "+packet.Dto.Id);
                }
            }
        }

    }
}
