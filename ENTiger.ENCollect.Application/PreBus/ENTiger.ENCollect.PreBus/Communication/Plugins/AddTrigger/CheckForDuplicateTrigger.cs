// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.CommunicationModule.AddTriggerCommunicationPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckForDuplicateTrigger : FlexiBusinessRuleBase, IFlexiBusinessRule<AddTriggerDataPacket>
    {
        public override string Id { get; set; } = "3a1a71238d1bde8dab69b17ced17e9fa";
        public override string FriendlyName { get; set; } = "CheckForDuplicateTrigger";

        protected readonly ILogger<CheckForDuplicateTrigger> _logger;
        protected readonly RepoFactory _repoFactory;

        public CheckForDuplicateTrigger(ILogger<CheckForDuplicateTrigger> logger, RepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(AddTriggerDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);

            var TemplateTypeExists = await _repoFactory.GetRepo().FindAll<CommunicationTrigger>()
                                            .ByTriggerType(packet.Dto.TriggerTypeId)
                                            .ByTriggerDaysOffset(packet.Dto.DaysOffset)
                                            .ByActiveCommunicationTrigger()
                                            .FirstOrDefaultAsync();
            if (TemplateTypeExists != null)
            {
                packet.AddError("Error", "A trigger with same value of " +packet.Dto.DaysOffset+" exists for this trigger type in active state.");
            }
        }

    }
}
