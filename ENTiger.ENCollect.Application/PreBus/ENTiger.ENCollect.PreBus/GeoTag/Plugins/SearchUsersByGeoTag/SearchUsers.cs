// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;

namespace ENTiger.ENCollect.GeoTagModule.SearchUsersByGeoTagGeoTagPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class SearchUsers : FlexiBusinessRuleBase, IFlexiBusinessRule<SearchUsersByGeoTagDataPacket>
    {
        public override string Id { get; set; } = "3a13679c0323c1cc63c5b2f507c69265";
        public override string FriendlyName { get; set; } = "SearchUsers";

        protected readonly ILogger<SearchUsers> _logger;
        protected readonly IRepoFactory _repoFactory;
        private double inputRadius = 0;
        private readonly LocationSettings _locationSettings;

        public SearchUsers(ILogger<SearchUsers> logger, IRepoFactory repoFactory, IOptions<LocationSettings> locationSettings)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _locationSettings = locationSettings.Value;
        }

        public virtual async Task Validate(SearchUsersByGeoTagDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);
            inputRadius = _locationSettings.RadiusInKms;
            List<SearchUsersByGeoTagResultModel> result = new List<SearchUsersByGeoTagResultModel> ();

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            //packet.AddError("Error", "ErrorMessage");

            var input = packet.Dto;
            if (!packet.HasError)
            {
                if(input.IsSearchByLocation == true)
                {
                    var geoSeachUserLocationDetails = await _repoFactory.GetRepo().FindAll<ApplicationUser>()
                                 .UserDetailByDistance(input.Latitude, input.Longitude, inputRadius)
                                 .ToListAsync();

                    foreach (var user in geoSeachUserLocationDetails)
                    {
                        SearchUsersByGeoTagResultModel objData = new SearchUsersByGeoTagResultModel();
                        objData.UserId = user.UserId;
                        objData.MobileNumber = user.PrimaryMobileNumber;
                        objData.UserName = (string.IsNullOrEmpty(user.FirstName) ? string.Empty : user.FirstName)
                                          + " " + (string.IsNullOrEmpty(user.MiddleName) ? string.Empty : user.MiddleName)
                                          + " " + (string.IsNullOrEmpty(user.LastName) ? string.Empty : user.LastName);
                        objData.LocationDateTime = user.UserCurrentLocationDetails?.LastModifiedDate;
                        objData.Latitude = user.UserCurrentLocationDetails?.Latitude;
                        objData.Longitude = user.UserCurrentLocationDetails?.Longitude;
                        result.Add(objData);
                    }
                }
                else
                {
                    var appUserDetail = await _repoFactory.GetRepo().FindAll<ApplicationUser>()
                                                .ByIncludeUserCurrentLocation()
                                                .ByGEOCustomId(input.UserId)
                                                .ByGEOMobilenumberId(input.MobileNumber)
                                                .ToListAsync();

                    foreach (var appUser in appUserDetail)
                    {
                        SearchUsersByGeoTagResultModel objData = new SearchUsersByGeoTagResultModel();
                        objData.UserName = (string.IsNullOrEmpty(appUser.FirstName) ? string.Empty : appUser.FirstName)
                                          + " " + (string.IsNullOrEmpty(appUser.MiddleName) ? string.Empty : appUser.MiddleName)
                                          + " " + (string.IsNullOrEmpty(appUser.LastName) ? string.Empty : appUser.LastName);

                        objData.Latitude = appUser.UserCurrentLocationDetails?.Latitude;
                        objData.Longitude = appUser.UserCurrentLocationDetails?.Longitude;
                        objData.MobileNumber = appUser.PrimaryMobileNumber;
                        objData.UserId = appUser.CustomId;
                        objData.LocationDateTime = appUser.UserCurrentLocationDetails?.LastModifiedDate;
                        result.Add(objData);
                    }
                }

                packet.output = result;
            }
        }
    }
}
