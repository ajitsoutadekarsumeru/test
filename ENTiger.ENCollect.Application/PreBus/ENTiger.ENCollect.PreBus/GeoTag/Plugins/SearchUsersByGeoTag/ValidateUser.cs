// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.GeoTagModule.SearchUsersByGeoTagGeoTagPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateUser : FlexiBusinessRuleBase, IFlexiBusinessRule<SearchUsersByGeoTagDataPacket>
    {
        public override string Id { get; set; } = "3a13679c0d702c99022e69adb0fe06ee";
        public override string FriendlyName { get; set; } = "ValidateUser";

        protected readonly ILogger<ValidateUser> _logger;
        protected readonly IRepoFactory _repoFactory;

        public ValidateUser(ILogger<ValidateUser> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(SearchUsersByGeoTagDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            //packet.AddError("Error", "ErrorMessage");

            string mobileNumber = packet.Dto.MobileNumber;
            string userId = packet.Dto.UserId;
            string _IMEI = packet.Dto.IMEI;

            ApplicationUser userDetail = new ApplicationUser();
            
            if (userId != null && mobileNumber != "")
            {
                userDetail = await _repoFactory.GetRepo().FindAll<ApplicationUser>().Where(p => p.CustomId == userId).FirstOrDefaultAsync();
                
                if (userDetail == null)
                {
                    packet.AddError("Error", "Invalid User Id " + userId);
                }
            }
            if (mobileNumber != null && mobileNumber != "")
            {
                userDetail = await _repoFactory.GetRepo().FindAll<ApplicationUser>().Where(p => p.PrimaryMobileNumber == mobileNumber).FirstOrDefaultAsync();                

                if (userDetail == null)
                {
                    packet.AddError("Error", "Invalid Mobile Number " + mobileNumber);
                }
            }
        }
    }
}
