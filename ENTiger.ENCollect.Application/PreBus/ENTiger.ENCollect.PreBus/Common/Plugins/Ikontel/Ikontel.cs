// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Reflection;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.CommonModule.IkontelCommonPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class Ikontel : FlexiBusinessRuleBase, IFlexiBusinessRule<IkontelDataPacket>
    {
        public override string Id { get; set; } = "3a1360dd2b0cb8e9d5c3cbd368df878c";
        public override string FriendlyName { get; set; } = "Ikontel";

        protected readonly ILogger<Ikontel> _logger;
        protected readonly IRepoFactory _repoFactory;

        public Ikontel(ILogger<Ikontel> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(IkontelDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            //_repoFactory.Init(packet.Dto);

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            //packet.AddError("Error", "ErrorMessage");

            /*

            var servicedetails = _RepoFlex.FindAll<ServiceConfigurations>().Where(a => a.ModuleName == "IkontelService").FirstOrDefault();
            if (servicedetails == null)
            {
                logger.LogWarning("IkontelFFPlugin : Please configure the service <<IkontelService>> in ServiceConfigurations for Tenant : " + packet.TenantId);
                packet.AddError("Error", "Service unavailable, please contact administrator");
            }
            else
            {
                string assemblyPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                string DllPath = Path.Combine(assemblyPath, servicedetails.DLLPath);//dllName + ".dll");

                logger.LogInformation("IkontelFFPlugin : DllPath : " + DllPath);
                if (File.Exists(DllPath))
                {
                    var DLL = Assembly.LoadFile(DllPath);
                    var theType = DLL.GetType(servicedetails.Namespace + servicedetails.Classname);
                    dynamic c = Activator.CreateInstance(theType);
                    var JsonResp = c.ExecuteFn(packet);
                    System.Diagnostics.Trace.WriteLine(JsonResp);
                }
            }
            */
            await Task.CompletedTask; //If you have any await in the validation, remove this line

        }

    }
}
