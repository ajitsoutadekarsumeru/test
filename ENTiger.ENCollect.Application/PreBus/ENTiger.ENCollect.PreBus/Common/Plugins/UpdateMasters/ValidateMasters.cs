// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.CommonModule.UpdateMastersCommonPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateMasters : FlexiBusinessRuleBase, IFlexiBusinessRule<UpdateMastersDataPacket>
    {
        public override string Id { get; set; } = "3a139e48ca41eaf9b112331a864930dd";
        public override string FriendlyName { get; set; } = "ValidateMasters";

        protected readonly ILogger<ValidateMasters> _logger;
        protected readonly IRepoFactory _repoFactory;

        public ValidateMasters(ILogger<ValidateMasters> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(UpdateMastersDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);
            string MasterTypeName = "";

            _logger.LogDebug("SearchMastersDetailsFFPlugin : Start");
            MasterTypeName = packet.Dto.MasterName;

            if (string.Equals(MasterTypeName, MasterEnum.PRODUCTMASTER.Value, StringComparison.OrdinalIgnoreCase))
            {
                CategoryItem categoryItem = await _repoFactory.GetRepo().FindAll<CategoryItem>().FirstOrDefaultAsync(a => a.Id == packet.Dto.Id);
                if (categoryItem == null)
                {
                    packet.AddError("Error", "ProductMasterId Doesn't Exist.");
                }
            }
            else if (string.Equals(MasterTypeName, MasterEnum.DEPOSITBANKMASTER.Value, StringComparison.OrdinalIgnoreCase))
            {
                DepositBankMaster depositBankMaster =await _repoFactory.GetRepo().FindAll<DepositBankMaster>().FirstOrDefaultAsync(a => a.Id == packet.Dto.Id);
                if (depositBankMaster == null)
                {
                    packet.AddError("Error", "DepositBankMasterId Doesn't Exist.");
                }
            }
            else if (string.Equals(MasterTypeName, MasterEnum.GEOMASTER.Value, StringComparison.OrdinalIgnoreCase))
            {
                // No action specified for GEOMASTER
            }
            else if (string.Equals(MasterTypeName, MasterEnum.BANKMASTER.Value, StringComparison.OrdinalIgnoreCase))
            {
                Bank bank = await _repoFactory.GetRepo().FindAll<Bank>().FirstOrDefaultAsync(a => a.Id == packet.Dto.Id);
                if (bank == null)
                {
                    packet.AddError("Error", "BankMasterId Doesn't Exist.");
                }
            }
            else if (string.Equals(MasterTypeName, MasterEnum.BASEBRANCHMASTER.Value, StringComparison.OrdinalIgnoreCase))
            {
                BaseBranch baseBranch = await _repoFactory.GetRepo().FindAll<BaseBranch>().FirstOrDefaultAsync(a => a.Id == packet.Dto.Id);
                if (baseBranch == null)
                {
                    packet.AddError("Error", "BaseBranchMasterId Doesn't Exist.");
                }
            }
            else if (string.Equals(MasterTypeName, MasterEnum.BUCKETMASTER.Value, StringComparison.OrdinalIgnoreCase))
            {
                Bucket bucket = await _repoFactory.GetRepo().FindAll<Bucket>().FirstOrDefaultAsync(a => a.Id == packet.Dto.Id);
                if (bucket == null)
                {
                    packet.AddError("Error", "BucketMasterId Doesn't Exist.");
                }
            }
            else if (string.Equals(MasterTypeName, MasterEnum.DISPOSITIONCODEMASTER.Value, StringComparison.OrdinalIgnoreCase))
            {
                DispositionCodeMaster dispositionCodeMaster = await _repoFactory.GetRepo().FindAll<DispositionCodeMaster>().FirstOrDefaultAsync(a => a.Id == packet.Dto.Id);
                if (dispositionCodeMaster == null)
                {
                    packet.AddError("Error", "DispositionCodeMasterId Doesn't Exist.");
                }
            }
            else if (string.Equals(MasterTypeName, MasterEnum.DEPARTMENTDESIGNATIONMASTER.Value, StringComparison.OrdinalIgnoreCase))
            {
                Designation designation = await _repoFactory.GetRepo().FindAll<Designation>().FirstOrDefaultAsync(a => a.Id == packet.Dto.Id);
                if (designation == null)
                {
                    packet.AddError("Error", "DesignationDepartmentMasterId Doesn't Exist.");
                }
            }
            else
            {
                packet.AddError("Error", "MasterTypeName is Empty.");
            }
        }
    }
}
