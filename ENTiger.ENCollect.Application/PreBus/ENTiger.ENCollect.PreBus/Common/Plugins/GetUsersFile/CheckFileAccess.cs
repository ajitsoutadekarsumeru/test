// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;

namespace ENTiger.ENCollect.CommonModule.GetUsersFileCommonPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckFileAccess : FlexiBusinessRuleBase, IFlexiBusinessRule<GetUsersFileDataPacket>
    {
        public override string Id { get; set; } = "3a15c01fa05a43aa56608478a422e94a";
        public override string FriendlyName { get; set; } = "CheckFileAccess";

        protected readonly ILogger<CheckFileAccess> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;
        private readonly FileConfigurationSettings _fileConfigurationSettings;
        public CheckFileAccess(ILogger<CheckFileAccess> logger, IRepoFactory repoFactory, IOptions<FileConfigurationSettings> fileConfigurationSettings)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _fileConfigurationSettings = fileConfigurationSettings.Value;
        }

        public virtual async Task Validate(GetUsersFileDataPacket packet)
        {
            string FileExtension = _fileConfigurationSettings.DefaultExtension;
            if (!packet.HasError)
            {
                _repoFactory.Init(packet.Dto);
                _flexAppContext = packet.Dto.GetAppContext();

                string userId = _flexAppContext.UserId;
                List<string> filesList = new List<string>();

                var createFiles = await _repoFactory.GetRepo().FindAll<UsersCreateFile>()
                                        .Where(x => x.CreatedBy == userId)
                                        .ToListAsync();
                if (createFiles != null && createFiles.Count() > 0)
                {
                    filesList.AddRange(createFiles.Select(x => x.FileName).ToList());
                    filesList.AddRange(createFiles.Select(x => x.CustomId + FileExtension).ToList());
                }

                var updateFiles = await _repoFactory.GetRepo().FindAll<UsersUpdateFile>()
                                            .Where(x => x.CreatedBy == userId)
                                            .ToListAsync();
                if (updateFiles != null && updateFiles.Count() > 0)
                {
                    filesList.AddRange(updateFiles.Select(x => x.FileName).ToList());
                    filesList.AddRange(updateFiles.Select(x => x.CustomId + FileExtension).ToList());
                }
                if (filesList.Where(x => x != null && x.Contains(packet.Dto.FileName)).Count() == 0)
                {
                    _logger.LogError("CheckFileAccess : Access Denied");
                    packet.AddError("Error", "Access Denied");
                }
            }
        }
    }
}
