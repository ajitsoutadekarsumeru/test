// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using ENTiger.ENCollect.DomainModels.Utilities;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;
using ENTiger.ENCollect.DomainModels;
using Microsoft.Extensions.Options;
using System.IO.Abstractions;

namespace ENTiger.ENCollect.CommonModule.GetUsersFileCommonPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateFile : FlexiBusinessRuleBase, IFlexiBusinessRule<GetUsersFileDataPacket>
    {
        public override string Id { get; set; } = "3a15c01fa894c1dc65e7a14ed469167d";
        public override string FriendlyName { get; set; } = "ValidateFile";

        protected readonly ILogger<ValidateFile> _logger;
        protected readonly IRepoFactory _repoFactory;
        private readonly IFileValidationUtility _fileValidationUtility;
        private readonly IFileSystem _fileSystem;
        private readonly FilePathSettings _filePathSettings;
        private readonly FileConfigurationSettings _fileConfigurationSettings;
        public ValidateFile(ILogger<ValidateFile> logger, IRepoFactory repoFactory, IFileValidationUtility fileValidationUtility, IFileSystem fileSystem, IOptions<FilePathSettings> filePathSettings, IOptions<FileConfigurationSettings> fileConfigurationSettings)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _fileValidationUtility = fileValidationUtility;
            _fileSystem = fileSystem;
            _filePathSettings = filePathSettings.Value;
            _fileConfigurationSettings = fileConfigurationSettings.Value;
        }

        public virtual async Task Validate(GetUsersFileDataPacket packet)
        {
            var sourceFilename = packet.Dto.FileName.Trim('"');
            string fileExtension = _fileSystem.Path.GetExtension(sourceFilename).ToLower();
            if (fileExtension != FileTypeEnum.CSV.Value && fileExtension != FileTypeEnum.XLSX.Value && fileExtension != FileTypeEnum.XLS.Value)
            {
                packet.AddError("Error", "Invalid File");
            }
            else
            {
                if (!_fileValidationUtility.ValidateFileName(packet.Dto.FileName, out string errorMessage))
                {
                    packet.AddError("Error", errorMessage);
                }
                else
                {
                    string defaultFileExtension = _fileConfigurationSettings.DefaultExtension;
                    string defaultFilePath = _fileSystem.Path.Combine(_filePathSettings.BasePath, _filePathSettings.IncomingPath);

                    string filePath = defaultFileExtension != fileExtension ? defaultFilePath :
                        _fileSystem.Path.Combine(defaultFilePath, _filePathSettings.UserProcessedFilePath);

                    if (!_fileValidationUtility.ValidateDownloadFile(packet.Dto.FileName, out string message, filePath))
                    {
                        packet.AddError("Error", message);
                    }
                    else
                    {
                        packet.FilePath = filePath;
                    }
                }
            }

            await Task.CompletedTask; //If you have any await in the validation, remove this line
        }
    }
}
