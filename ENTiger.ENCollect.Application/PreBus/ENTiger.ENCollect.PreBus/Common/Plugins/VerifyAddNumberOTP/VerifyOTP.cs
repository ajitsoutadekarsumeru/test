// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;

namespace ENTiger.ENCollect.CommonModule.VerifyAddNumberOTPCommonPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class VerifyOTP : FlexiBusinessRuleBase, IFlexiBusinessRule<VerifyAddNumberOTPDataPacket>
    {
        public override string Id { get; set; } = "3a134d0edca4cec3cf143071d9a71f24";
        public override string FriendlyName { get; set; } = "VerifyOTP";

        // Dependency-injected logger and repository factory
        private readonly ILogger<VerifyOTP> _logger;
        private readonly IRepoFactory _repoFactory;
        private readonly OtpSettings _otpSettings;

        // Variables to store OTP and Transaction ID
        private string _OTPCode;
        private string _transactionId;

        // Model to hold the result of OTP verification
        private VerifyAddNumberOTPResultModel message = new VerifyAddNumberOTPResultModel();

        // Constructor to initialize dependencies
        public VerifyOTP(ILogger<VerifyOTP> logger, IRepoFactory repoFactory, IOptions<OtpSettings> otpSettings)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _otpSettings = otpSettings.Value;
        }

        // Main validation method to check the OTP
        public virtual async Task Validate(VerifyAddNumberOTPDataPacket packet)
        {
            // OTP expiry time setting (in minutes)
            int otpExpiryTime = _otpSettings.Expiry.LoginOtpInMins;

            // Extract OTP and Transaction ID from the incoming data packet
            _OTPCode = packet.Dto.OTP;
            _transactionId = packet.Dto.TransactionId;

            // Initialize repository for data access using the packet DTO (Data Transfer Object)
            _repoFactory.Init(packet.Dto);

            // Query the database to find the matching verification code
            var data = await _repoFactory.GetRepo().FindAll<UserVerificationCodes>()
                                .Where(y => !y.IsDeleted && y.TransactionID == _transactionId)
                                .FirstOrDefaultAsync();

            // If no record found, return an invalid request error
            if (data == null)
            {
                message.Message = "Invalid Request";
                packet.AddError("Error", "Invalid Request");
            }
            // Check if the OTP has expired by comparing the current time with the created date
            else if (DateTimeOffset.Now.Subtract(data.CreatedDate).TotalMinutes > otpExpiryTime)
            {
                message.Message = "OTP Expired. Please try again";
                packet.AddError("Error", "OTP Expired. Please try again");
            }
            else
            {
                // If OTP matches, mark it as verified
                if (data.ShortVerificationCode == _OTPCode)
                {
                    message.Message = "OTP verified";
                    message.IsOTPVerified = true;
                }
                else
                {
                    // If OTP doesn't match, return an error
                    message.Message = "OTP doesn't match. Please enter again";
                    packet.AddError("Error", "OTP doesn't match. Please enter again");
                }
            }
            // Attach the result message to the packet (response)
            packet.output = message;

            // Log the success of OTP verification (helpful for debugging)
            if (message.IsOTPVerified)
            {
                data.SetAsDeleted(true);
                data.SetAddedOrModified();
                _repoFactory.GetRepo().InsertOrUpdate(data);
                int records = await _repoFactory.GetRepo().SaveAsync();
                _logger.LogInformation($"OTP successfully verified for transaction ID: {_transactionId}");
            }
        }
    }
}
