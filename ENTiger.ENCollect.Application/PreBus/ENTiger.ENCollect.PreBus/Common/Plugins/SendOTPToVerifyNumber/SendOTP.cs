// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using DocumentFormat.OpenXml.Spreadsheet;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.CommonModule.SendOTPToVerifyNumberCommonPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class SendOTP : FlexiBusinessRuleBase, IFlexiBusinessRule<SendOTPToVerifyNumberDataPacket>
    {
        public override string Id { get; set; } = "3a134d0e2e55e075c3b38bb236034605";
        public override string FriendlyName { get; set; } = "SendOTP";

        protected readonly ILogger<SendOTP> _logger;
        protected readonly IRepoFactory _repoFactory;
        private readonly ICustomUtility _customUtility;
        string? _partyId;
        protected FlexAppContextBridge? _flexAppContext;
        ApplicationUser applicationUser;
        protected readonly IEmailUtility _emailUtility;
        protected readonly ISmsUtility _smsUtility;
        protected readonly MessageTemplateFactory _messageTemplateFactory;

        public SendOTP(ILogger<SendOTP> logger, IRepoFactory repoFactory, ISmsUtility smsUtility, IEmailUtility emailUtility, MessageTemplateFactory messageTemplateFactory, ICustomUtility customUtility)
        {
            _smsUtility = smsUtility;
            _emailUtility = emailUtility;
            _messageTemplateFactory = messageTemplateFactory;

            _logger = logger;
            _repoFactory = repoFactory;
            _customUtility = customUtility;
        }

        public virtual async Task Validate(SendOTPToVerifyNumberDataPacket packet)
        {
            _flexAppContext = packet.Dto.GetAppContext();
            string hostName = _flexAppContext.HostName;
            _logger.LogInformation("SendOTP : Start | HostName - " + hostName);

            _repoFactory.Init(packet.Dto);
            _flexAppContext = packet.Dto.GetAppContext();  //do not remove this line
            _partyId = _flexAppContext.UserId;            

            SendOTPToVerifyNumberDto _inputModel = new SendOTPToVerifyNumberDto();
            _inputModel = packet.Dto;

            UserVerificationCodes usercodes = new UserVerificationCodes();
            string verificationcodetype = string.Empty;

            var shortcode = _customUtility.GenerateRandomCode();

            _logger.LogInformation("SendOTP : For " + _inputModel.Description);
            if (string.Equals(_inputModel.Description, "issuereceipt", StringComparison.OrdinalIgnoreCase))
            {
                verificationcodetype = await _repoFactory.GetRepo().FindAll<UserVerificationCodeTypes>()
                                                .Where(i => string.Equals(i.Description, "issuereceipt"))
                                                .Select(i => i.Id)
                                                .FirstOrDefaultAsync();
            }
            else if (string.Equals(_inputModel.Description, "updatetrail", StringComparison.OrdinalIgnoreCase))
            {
                verificationcodetype = await _repoFactory.GetRepo().FindAll<UserVerificationCodeTypes>()
                                                .Where(i => string.Equals(i.Description, "updatetrail"))
                                                .Select(i => i.Id)
                                                .FirstOrDefaultAsync();            }

            usercodes.TransactionID = SequentialGuid.NewGuidString();
            usercodes.ShortVerificationCode = shortcode;
            usercodes.UserVerificationCodeTypeId = verificationcodetype;
            usercodes.UserId = _partyId;
            usercodes.SetAdded();
            _repoFactory.GetRepo().InsertOrUpdate(usercodes);
            await _repoFactory.GetRepo().SaveAsync();
            _logger.LogInformation("SendOTP : UserVerificationCodes Saved");

            if (usercodes != null)
            {
                _logger.LogInformation("SendOTP : Send SMS - " + _inputModel.PhoneNo);
                var messageTemplate = _messageTemplateFactory.PaymentOtpTemplate(usercodes.ShortVerificationCode, packet.Dto.GetAppContext().HostName);
                _logger.LogInformation("SendOTP : Send SMS - " + _inputModel.PhoneNo);
                
                await _smsUtility.SendSMS(_inputModel.PhoneNo, messageTemplate.SMSMessage, packet.Dto.GetAppContext().TenantId);
                _logger.LogInformation("SendOTP : SMS Sent Successfully.");

                SendOTPToVerifyNumberResultModel model = new SendOTPToVerifyNumberResultModel();
                model.Message = "OTP sent succesfully";
                model.IsOTPVerified = false;
                model.TransactionId = usercodes.TransactionID;
                packet.output = model;
            }
            _logger.LogInformation("SendOTP : End");
        }
    }
}
