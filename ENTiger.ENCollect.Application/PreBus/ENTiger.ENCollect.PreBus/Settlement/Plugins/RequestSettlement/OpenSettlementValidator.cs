// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.SettlementModule.RequestSettlementSettlementPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class OpenSettlementValidator : FlexiBusinessRuleBase, IFlexiBusinessRule<RequestSettlementDataPacket>
    {
        public override string Id { get; set; } = "3a19505763737c88bf1a3d385ea5b192";
        public override string FriendlyName { get; set; } = "OpenSettlementValidator";

        protected readonly ILogger<OpenSettlementValidator> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected readonly ISettlementRepository _settlementRepository;
        

        public OpenSettlementValidator(ILogger<OpenSettlementValidator> logger, 
            IRepoFactory repoFactory,ISettlementRepository settlementRepository)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _settlementRepository = settlementRepository;
        }

        public virtual async Task Validate(RequestSettlementDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            //_repoFactory.Init(packet.Dto);

            // ---: Ensure no open settlement exists ---
            bool hasOpen = await _settlementRepository.ExistsOpenSettlementAsync(packet.Dto.GetAppContext(), packet.Dto.LoanAccountId);
            if (hasOpen)
            {
                packet.AddError(nameof(packet.Dto.LoanAccountId),
                    "An open settlement already exists for this loan account.");
            }

        }

    }
}
