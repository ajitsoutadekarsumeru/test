// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.SettlementModule.RequestSettlementSettlementPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class WaiverDetailsValidator : FlexiBusinessRuleBase, IFlexiBusinessRule<RequestSettlementDataPacket>
    {
        public override string Id { get; set; } = "3a19505763737c88bf1a3d385ea5b193";
        public override string FriendlyName { get; set; } = "WaiverDetailsValidator";

        protected readonly ILogger<WaiverDetailsValidator> _logger;
        protected readonly IRepoFactory _repoFactory;

        public WaiverDetailsValidator(ILogger<WaiverDetailsValidator> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(RequestSettlementDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);
           
            // --- WaiverDetails ---
            if (packet.Dto.WaiverDetails == null || !packet.Dto.WaiverDetails.Any())
            {
                packet.AddError(nameof(packet.Dto.WaiverDetails), "At least one waiver detail is required.");
            }
            else
            {
                decimal sumApportionment = 0m;
                for (int i = 0; i < packet.Dto.WaiverDetails.Count; i++)
                {
                    var waiver = packet.Dto.WaiverDetails[i];
                    var prefix = $"{nameof(packet.Dto.WaiverDetails)}[{i}]";

                    //  No negatives
                    if (waiver.AmountAsPerCBS < 0)
                        packet.AddError($"{prefix}.{nameof(waiver.AmountAsPerCBS)}", "AmountAsPerCBS must be zero or positive.");
                    if (waiver.ApportionmentAmount < 0)
                        packet.AddError($"{prefix}.{nameof(waiver.ApportionmentAmount)}", "ApportionmentAmount must be zero or positive.");
                    if (waiver.WaiverAmount < 0)
                        packet.AddError($"{prefix}.{nameof(waiver.WaiverAmount)}", "WaiverAmount must be zero or positive.");

                    // 2. Apportionment <= CBS
                    if (waiver.ApportionmentAmount > waiver.AmountAsPerCBS)
                        packet.AddError($"{prefix}.{nameof(waiver.ApportionmentAmount)}",
                            "Apportionment amount must be less than or equal to AmountAsPerCBS.");

                    // 3. Waiver <= CBS
                    if (waiver.WaiverAmount > waiver.AmountAsPerCBS)
                        packet.AddError($"{prefix}.{nameof(waiver.WaiverAmount)}",
                            "Waiver amount must be less than or equal to AmountAsPerCBS.");

                    // 4. Apportionment + Waiver == CBS
                    if (waiver.ApportionmentAmount + waiver.WaiverAmount != waiver.AmountAsPerCBS)
                        packet.AddError($"{prefix}",
                            "Apportionment amount plus Waiver amount must equal AmountAsPerCBS.");

                    sumApportionment += waiver.ApportionmentAmount;
                }

                // 1. SettlementAmount == sum of all Apportionments
                if (packet.Dto.SettlementAmount != sumApportionment)
                {
                    packet.AddError(nameof(packet.Dto.SettlementAmount),
                        $"Settlement amount ({packet.Dto.SettlementAmount}) must equal sum of all apportionments ({sumApportionment}).");
                }
            }

                await Task.CompletedTask; //If you have any await in the validation, remove this line

        }

    }
}
