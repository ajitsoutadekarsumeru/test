// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.SettlementModule.RequestSettlementSettlementPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class InstallmentsValidator : FlexiBusinessRuleBase, IFlexiBusinessRule<RequestSettlementDataPacket>
    {
        public override string Id { get; set; } = "3a19505763737c88bf1a3d385ea5b194";
        public override string FriendlyName { get; set; } = "InstallmentsValidator";

        protected readonly ILogger<InstallmentsValidator> _logger;
        protected readonly IRepoFactory _repoFactory;

        public InstallmentsValidator(ILogger<InstallmentsValidator> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(RequestSettlementDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);

            if (packet.Dto.TrancheType.ToLower() == SettlementTrancheTypeEnum.OneTime.Value 
                && packet.Dto.NumberOfInstallments != 1)
                packet.AddError(nameof(packet.Dto.NumberOfInstallments), "One-time tranche requires exactly 1 installment.");
            
            if (packet.Dto.TrancheType.ToLower() == SettlementTrancheTypeEnum.Staggered.Value 
                && packet.Dto.NumberOfInstallments < 2)
                packet.AddError(nameof(packet.Dto.NumberOfInstallments), "Staggered tranche requires at least 2 installments.");

            // --- Installments ---
            if (packet.Dto.Installments == null 
                || packet.Dto.Installments.Count != packet.Dto.NumberOfInstallments)
            {
                packet.AddError(nameof(packet.Dto.Installments), "Installment count must match NumberOfInstallments.");
            }
            else
            {
               
                for (int i = 0; i < packet.Dto.Installments.Count; i++)
                {
                    var installment = packet.Dto.Installments[i];
                    var prefix = $"{nameof(packet.Dto.Installments)}[{i}]";

                    if (installment.InstallmentAmount <= 0)
                        packet.AddError($"{prefix}.{nameof(installment.InstallmentAmount)}", "Installment amount must be greater than zero.");
                    if (installment.InstallmentDueDate == default)
                        packet.AddError($"{prefix}.{nameof(installment.InstallmentDueDate)}", "Installment due date is required.");
                    else
                    {
                        // cannot be before the settlement calculation date
                        if (installment.InstallmentDueDate < packet.Dto.SettlementDateForDuesCalc)
                            packet.AddError($"{prefix}.{nameof(installment.InstallmentDueDate)}",
                                "Installment due date cannot be before settlement date for dues calculation.");

                        // must be today or future
                        var todayUtc = DateTime.UtcNow.Date;
                        if (installment.InstallmentDueDate.Date < todayUtc)
                            packet.AddError($"{prefix}.{nameof(installment.InstallmentDueDate)}",
                                "Installment due date must be today or a future date.");
                    }
                }
            }

                await Task.CompletedTask; //If you have any await in the validation, remove this line

        }

    }
}
