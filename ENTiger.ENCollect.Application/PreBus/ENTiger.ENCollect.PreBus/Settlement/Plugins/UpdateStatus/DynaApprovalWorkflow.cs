// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Elastic.Clients.Elasticsearch.Snapshot;
using ENCollect.Dyna.Workflows;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.SettlementModule.UpdateStatusSettlementPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class DynaApprovalWorkflow : FlexiBusinessRuleBase, IFlexiBusinessRule<UpdateStatusDataPacket>
    {
        public override string Id { get; set; } = "3a19ff0f01dc83a7bffe8b497e7edd95";
        public override string FriendlyName { get; set; } = "DynaApprovalWorkflow";

        protected readonly ILogger<DynaApprovalWorkflow> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected readonly IFlexServiceBusBridge _bus;

        public DynaApprovalWorkflow(ILogger<DynaApprovalWorkflow> logger, 
            IRepoFactory repoFactory, IFlexServiceBusBridge bus)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _bus = bus;
        }

        public virtual async Task Validate(UpdateStatusDataPacket packet)
        {
            foreach (var dto in packet.Dto.Updates)
            {


                DynaWorkflowTransitionCommand command = new DynaWorkflowTransitionCommand();
                var status = dto.Status?.Trim();
                bool flag = false;

                // or, safer (ignore case + no exception)
                if (Enum.TryParse<ActionType>(status, true, out var action))
                {
                    command.ActionType = action;
                    flag = true;
                }
                else
                {
                    packet.AddError(nameof(dto.Status),
                        $"Invalid status '{dto.Status}'. Expected 'approve' 'reject' or 'renegotiate'.");

                }

                if (flag)
                {
                    command.FlexAppContext = packet.Dto.GetAppContext();
                    command.WorkflowInstanceId = dto.WorkflowInstanceId;
                    command.StepName = dto.StepName;
                    command.UserId = packet.Dto.GetAppContext().UserId;
                    dto.SetAppContext(packet.Dto.GetAppContext());
                    command.Dto = dto;
                    await _bus.Send(command);
                }
            }

        }

    }
}
