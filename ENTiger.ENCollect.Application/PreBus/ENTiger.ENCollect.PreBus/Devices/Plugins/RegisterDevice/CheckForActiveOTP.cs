// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.DevicesModule.RegisterDeviceDevicesPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckForActiveOTP : FlexiBusinessRuleBase, IFlexiBusinessRule<RegisterDeviceDataPacket>
    {
        public override string Id { get; set; } = "3a131e9e6c79033af1f9bf37db8587ee";
        public override string FriendlyName { get; set; } = "CheckForActiveOTP";

        protected readonly ILogger<CheckForActiveOTP> _logger;
        protected readonly IRepoFactory _repoFactory;
        private readonly OtpSettings _otpSettings;
        public CheckForActiveOTP(ILogger<CheckForActiveOTP> logger, IRepoFactory repoFactory, IOptions<OtpSettings> otpSettings)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _otpSettings = otpSettings.Value;
        }

        public virtual async Task Validate(RegisterDeviceDataPacket packet)
        {

            int otpExpiryTime = _otpSettings.Expiry.LoginOtpInMins;
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            if (!packet.HasError)
            {
                DeviceDetail oDevice = await _repoFactory.GetRepo().FindAll<DeviceDetail>()
                                                .Where(x => x.Email == packet.Dto.Email && !x.IsVerified)
                                                .OrderByDescending(i => i.CreatedDate)
                                                .FirstOrDefaultAsync();

                if (oDevice != null)
                {
                    if (DateTimeOffset.Now.Subtract(oDevice.OTPTimeStamp).TotalMinutes < otpExpiryTime)
                    {
                        packet.AddError("Error", "Current OTP is valid kindly use that or retry after " + otpExpiryTime + " mins");
                    }
                }
            }
        }
    }
}
