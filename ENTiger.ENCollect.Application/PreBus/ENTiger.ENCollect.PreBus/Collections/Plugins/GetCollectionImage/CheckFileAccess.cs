// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.CollectionsModule.GetCollectionImageCollectionsPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckFileAccess : FlexiBusinessRuleBase, IFlexiBusinessRule<GetCollectionImageDataPacket>
    {
        public override string Id { get; set; } = "3a138e3e0c2d28164b7cf76808a68ba1";
        public override string FriendlyName { get; set; } = "CheckFileAccess";

        protected readonly ILogger<CheckFileAccess> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;

        public CheckFileAccess(ILogger<CheckFileAccess> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(GetCollectionImageDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);
            _flexAppContext = packet.Dto.GetAppContext();  //do not remove this line

            string userId = _flexAppContext.UserId;

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            List<string> filesList = new List<string>();
            var user = await _repoFactory.GetRepo().Find<ApplicationUser>(userId).FirstOrDefaultAsync();
            if (user.GetType().Name.Contains("agencyuser", StringComparison.OrdinalIgnoreCase))
            {
                var agencyUser = await _repoFactory.GetRepo().Find<AgencyUser>(userId).FirstOrDefaultAsync();

                var collections = await _repoFactory.GetRepo().FindAll<Collection>()
                                            .Where(x => x.CollectionOrgId == agencyUser.AgencyId ||
                                                        x.CreatedBy == agencyUser.Id)
                                            .ToListAsync();

                if (collections != null && collections.Count() > 0)
                {
                    filesList.AddRange(collections.Select(x => x.PayerImageName).ToList());
                    filesList.AddRange(collections.Select(x => x.ChangeRequestImageName).ToList());
                }

                if (filesList.Where(x => x != null && x.Contains(packet.Dto.FileName)).Count() == 0)
                {
                    _logger.LogError("CheckReceiptAccess : Access Denied");
                    packet.AddError("Error", "Access Denied");
                }
            } 
        }
    }
}
