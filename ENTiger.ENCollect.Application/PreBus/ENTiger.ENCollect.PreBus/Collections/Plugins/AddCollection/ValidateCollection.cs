// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.Extensions.Logging;
using ENCollect.Security;
using Sumeru.Flex;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Options;
using Microsoft.EntityFrameworkCore;

namespace ENTiger.ENCollect.CollectionsModule.AddCollectionCollectionsPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateCollection : FlexiBusinessRuleBase, IFlexiBusinessRule<AddCollectionDataPacket>
    {
        public override string Id { get; set; } = "3a138e3bcb6b949700db22ffb16d60e9";
        public override string FriendlyName { get; set; } = "ValidateCollection";

        protected readonly ILogger<ValidateCollection> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;
        private readonly EncryptionSettings _encryptionSettings;

        public ValidateCollection(ILogger<ValidateCollection> logger, IRepoFactory repoFactory
                ,IOptions<EncryptionSettings> encryptionSettings)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _encryptionSettings = encryptionSettings.Value;
        }

        public virtual async Task Validate(AddCollectionDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);
            _flexAppContext = packet.Dto.GetAppContext();  //do not remove this line
            string loggedUserId = _flexAppContext.UserId;
            if (!string.IsNullOrEmpty(packet.Dto.CollectionMode) && string.Equals(packet.Dto.CollectionMode, CollectionModeEnum.Cash.Value, StringComparison.OrdinalIgnoreCase))
            {

                try
                {
                    string key = _encryptionSettings.StaticKeys.DecryptionKey;
                    var aesGcmCrypto = new AesGcmCrypto();
                    var aesGcmKey = Encoding.UTF8.GetBytes(key);
                    var accountNo = aesGcmCrypto.Decrypt(packet.Dto.AccountNo, aesGcmKey);

                    DateTime startDate = DateTime.Now.Date;
                    DateTime endDate = startDate.AddDays(1);


                    var collections = await _repoFactory.GetRepo().FindAll<Collection>()
                                            .ByCollectionPaymentMode(packet.Dto.CollectionMode)
                                            .Where(i => i.CreatedDate >= startDate &&
                                                        i.CreatedDate < endDate &&
                                                        i.Account.AGREEMENTID == accountNo)
                                            .Select(a =>
                                                new
                                                {
                                                    a.Id,
                                                    a.Amount,
                                                    a.CustomId,
                                                    a.Account.AGREEMENTID,
                                                    a.CollectionDate
                                                }).ToListAsync();

                    var collectionlimit = await _repoFactory.GetRepo().FindAll<FeatureMaster>()
                                            .Where(i => string.Equals(i.Parameter, "collectionlimit"))
                                            .FirstOrDefaultAsync();

                    if (collectionlimit != null && collectionlimit.IsEnabled)
                    {
                        decimal amount = 0;
                        if (collections != null && collections.Count > 0)
                        {
                            amount = collections.Sum(i => i.Amount ?? 0);
                        }

                        decimal TotalAmount = amount + (packet.Dto.Amount);
                        decimal remainingLimit = Convert.ToDecimal(collectionlimit?.Value) - amount;
                        if (TotalAmount > Convert.ToDecimal(collectionlimit?.Value))
                        {
                            packet.AddError("Error", $"As per RBI guidelines, you are not permitted to collect a total amount of more than Rs. 1,99,999 in cash in a day or in a single transaction. Your pending limit for today is Rs. {remainingLimit}.");
                        }

                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError("Exception in ValidateCollectionFFPlugin : " + ex);
                }
            }
            await Task.CompletedTask; //If you have any await in the validation, remove this line
        }
    }
}
