// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.CollectionsModule.AddCollectionCollectionsPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckDuplicateReceipt : FlexiBusinessRuleBase, IFlexiBusinessRule<AddCollectionDataPacket>
    {
        public override string Id { get; set; } = "3a138e3bd5cba763100e18161075301b";
        public override string FriendlyName { get; set; } = "CheckDuplicateReceipt";

        protected readonly ILogger<CheckDuplicateReceipt> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;
        protected readonly ICustomUtility _customUtility;
        public CheckDuplicateReceipt(ILogger<CheckDuplicateReceipt> logger, IRepoFactory repoFactory, ICustomUtility customUtility)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _customUtility = customUtility;
        }

        public virtual async Task Validate(AddCollectionDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            _flexAppContext = packet.Dto.GetAppContext();  //do not remove this line
            string userid = _flexAppContext.UserId;

            var input = packet.Dto;

            if (!packet.HasError)
            {
                Receipt receipt;
                ReceiptWorkflowState state = new ReceiptAllocatedToCollector();

                receipt = await _repoFactory.GetRepo().FindAll<Receipt>()
                            .ByReceiptNo(input.ReceiptNo)
                            .ByCollector(userid)
                            .ByWorkflowState(state)
                            .FirstOrDefaultAsync();
                
                if (receipt != null)
                {
                    receipt.MarkAsCollectionCollectedByCollector(userid);

                    ReceiptStorage save = new ReceiptStorage();
                    receipt.SetModified();
                    _repoFactory.GetRepo().InsertOrUpdate(receipt);
                    int records = await _repoFactory.GetRepo().SaveAsync();

                    packet.Receiptid = receipt.Id;
                    packet.Message = "RECEIPT SUBMITTED SUCCESSFULLY. Acknowledgement receipt # :" + receipt.CustomId + " Emailed and SMS sent to : " + input.EMailId + " / " + input.MobileNo;
                }
                else
                {
                    Receipt newreceipt = new Receipt();
                    newreceipt.CustomId = await _customUtility.GetNextCustomIdAsync(_flexAppContext, CustomIdEnum.EReceipt.Value);
                    newreceipt.CollectorId = userid;
                    newreceipt.SetAdded();
                    newreceipt.MarkAsCollectionCollectedByCollector(userid);
                    
                    _repoFactory.GetRepo().InsertOrUpdate(newreceipt);
                    int records = await _repoFactory.GetRepo().SaveAsync();

                    packet.Receiptid = newreceipt.Id;
                    string oldno = packet.Dto.ReceiptNo;
                    packet.Dto.ReceiptNo = newreceipt.CustomId;
                    packet.Message = "RECEIPT SUBMITTED BUT NOT PRINTED Acknowledgement receipt number : " + oldno + " replaced with new receipt #: " + newreceipt.CustomId + " . Email sent to : " + input.EMailId + " respectively.";

                }
            }
            await Task.CompletedTask; //If you have any await in the validation, remove this line
        }
    }
}
