// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using ENTiger.ENCollect.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Database;
using Sumeru.Flex;

namespace ENTiger.ENCollect.CollectionsModule.AddCollectionCollectionsPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class FundsAvailabilityPlugin : FlexiBusinessRuleBase, IFlexiBusinessRule<AddCollectionDataPacket>
    {
        public override string Id { get; set; } = "3a138e3bd5cba763100e18161075301f";
        public override string FriendlyName { get; set; } = "FundsAvailabilityPlugin";

        protected readonly ILogger<FundsAvailabilityPlugin> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;
        protected readonly ICustomUtility _customUtility;
        private readonly IWalletRepository _walletRepository;

        public FundsAvailabilityPlugin(ILogger<FundsAvailabilityPlugin> logger, 
            IRepoFactory repoFactory, 
            ICustomUtility customUtility,
            IWalletRepository walletRepository)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _customUtility = customUtility;
            _walletRepository = walletRepository;
        }

        public virtual async Task Validate(AddCollectionDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);

            _flexAppContext = packet.Dto.GetAppContext();  
            string userid = _flexAppContext.UserId;

            var input = packet.Dto;
            string agentId = _flexAppContext.UserId;
            if (!packet.HasError)
            {
                if (packet.Dto.CollectionMode.ToLower() == CollectionModeEnum.Cash.Value.ToLower())
                {
                    /// <summary>
                    /// Retrieves the receipt posting configuration to check if wallet updates are enabled.
                    /// </summary>
                    var walletLimitEnabled = await _repoFactory.GetRepo().FindAll<FeatureMaster>()
                                                   .FirstOrDefaultAsync(p => p.Parameter == "WalletLimitEnable");

                    bool isWalletLimitEnabled = bool.TryParse(walletLimitEnabled?.Value, out var enabled) && enabled;

                    // Wallet Limit Validation
                    if (isWalletLimitEnabled)
                    {
                        var wallet = await _walletRepository.GetByAgentIdAsync(_flexAppContext, agentId);
                        if (wallet != null)
                        {
                            var reservation = wallet.ReserveFunds(input.Amount);
                            if (reservation != null)
                            {
                                await _walletRepository.SaveAsync(_flexAppContext, wallet);                               
                                packet.ReservationId = reservation.Id;
                            }
                            else
                            {
                                packet.AddError("Error", "Insufficient available funds.");
                            }
                        }
                        else
                        {
                            packet.AddError("Error", $"Wallet not found for agent {agentId}");
                        }
                    }
                }

               
            }
            await Task.CompletedTask; 
        }
    }
}
