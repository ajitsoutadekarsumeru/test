// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.Extensions.Logging;
using ENCollect.Security;
using Sumeru.Flex;
using System.Text;
using Microsoft.EntityFrameworkCore;

namespace ENTiger.ENCollect.CollectionsModule.AddPhysicalCollectionCollectionsPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateAccount : FlexiBusinessRuleBase, IFlexiBusinessRule<AddPhysicalCollectionDataPacket>
    {
        public override string Id { get; set; } = "3a138e3f68610e209ff79b4eeaf31738";
        public override string FriendlyName { get; set; } = "ValidateAccount";

        protected readonly ILogger<ValidateAccount> _logger;
        protected readonly IRepoFactory _repoFactory;
        public ValidateAccount(ILogger<ValidateAccount> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(AddPhysicalCollectionDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            var aesGcmCrypto = new AesGcmCrypto();

            var result = await _repoFactory.GetRepo().Find<UserLoginKeys>(packet.Dto.Referenceid).FirstOrDefaultAsync();
            string key = result != null ? result.Key : "";

            var aesGcmKey = Encoding.UTF8.GetBytes(key);
            packet.Dto.AccountNo = aesGcmCrypto.Decrypt(packet.Dto.AccountNo, aesGcmKey);
            if (!string.IsNullOrEmpty(packet.Dto.yPANNo))
            {
                packet.Dto.yPANNo = aesGcmCrypto.Decrypt(packet.Dto.yPANNo, aesGcmKey);
            }
            //If any validation fails, uncomment and use the below line of code to add error to the packet
            string accountNo = packet.Dto.AccountNo;

            LoanAccount account = await _repoFactory.GetRepo().FindAll<LoanAccount>()
                                    .Where(i => i.AGREEMENTID == accountNo || i.CustomId == accountNo || i.PRIMARY_CARD_NUMBER == accountNo)
                                    .FirstOrDefaultAsync();

            if (account == null)
            {
                packet.AddError("Error", "Invalid Account " + accountNo);
            }
            else
            {
                DateTime startDate = DateTime.Now.Date;
                DateTime endDate = startDate.AddDays(1);

                var collections = await _repoFactory.GetRepo().FindAll<Collection>()
                                            .ByCollectionPaymentMode(packet.Dto.CollectionMode)
                                            .Where(i => i.CreatedDate >= startDate &&
                                                        i.CreatedDate < endDate &&
                                                        i.Account.AGREEMENTID == accountNo)
                                            .Select(a =>
                                                new
                                                {
                                                    a.Id,
                                                    a.Amount,
                                                    a.CustomId,
                                                    a.Account.AGREEMENTID,
                                                    a.CollectionDate
                                                })
                                            .ToListAsync();

                var collectionlimit = await _repoFactory.GetRepo().FindAll<FeatureMaster>()
                                                    .FirstOrDefaultAsync(i => string.Equals(i.Parameter, "collectionlimit"));


                if (collectionlimit != null && collectionlimit.IsEnabled)
                {
                    decimal amount = 0;
                    if (collections != null && collections.Count > 0)
                    {
                        amount = collections.Sum(i => i.Amount ?? 0);
                    }

                    decimal TotalAmount = amount + (packet.Dto.Amount ?? 0);
                    decimal remainingLimit = Convert.ToDecimal(collectionlimit?.Value) - amount;
                    if (TotalAmount > Convert.ToDecimal(collectionlimit?.Value))
                    {
                        packet.AddError("Error", $"As per RBI guidelines, you are not permitted to collect a total amount of more than Rs. 1,99,999 in cash in a day or in a single transaction. Your pending limit for today is Rs. {remainingLimit}.");
                    }
                }
            }
            await Task.CompletedTask; //If you have any await in the validation, remove this line
        }
    }
}
