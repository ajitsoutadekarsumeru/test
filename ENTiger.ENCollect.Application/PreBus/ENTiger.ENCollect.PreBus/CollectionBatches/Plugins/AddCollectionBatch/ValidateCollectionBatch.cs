// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.CollectionBatchesModule.AddCollectionBatchCollectionBatchesPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateCollectionBatch : FlexiBusinessRuleBase, IFlexiBusinessRule<AddCollectionBatchDataPacket>
    {
        public override string Id { get; set; } = "3a138f2a44f04a052bd284c6030c6e8c";
        public override string FriendlyName { get; set; } = "ValidateCollectionBatch";

        protected readonly ILogger<ValidateCollectionBatch> _logger;
        protected readonly IRepoFactory _repoFactory;

        public ValidateCollectionBatch(ILogger<ValidateCollectionBatch> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(AddCollectionBatchDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            ICollection<string> CollectionIds = packet.Dto.CollectionIds;
            int inputdecimal = (int)Decimal.Truncate(Convert.ToDecimal(packet.Dto.Amount));
            try
            {   
                decimal? collectionamount = await _repoFactory.GetRepo().FindAll<Collection>()
                                                    .Where(x => CollectionIds.Contains(x.Id))
                                                    .SumAsync(y => y.Amount);

                int amount = (int)Decimal.Truncate(Convert.ToDecimal(collectionamount));
                if (amount != inputdecimal)
                {
                    packet.AddError("Error", "Amount Mismatch");
                }                
            }
            catch (Exception ex)
            {
                _logger.LogError("CollectionAmountVerificationForBatch Exception " + ex);
            }
        }
    }
}
