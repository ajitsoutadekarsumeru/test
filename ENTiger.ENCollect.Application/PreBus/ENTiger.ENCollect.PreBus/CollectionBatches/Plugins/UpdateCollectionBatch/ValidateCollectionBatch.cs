// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.CollectionBatchesModule.UpdateCollectionBatchCollectionBatchesPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateCollectionBatch : FlexiBusinessRuleBase, IFlexiBusinessRule<UpdateCollectionBatchDataPacket>
    {
        public override string Id { get; set; } = "3a138f2c70b2c804fd7287177fd504c7";
        public override string FriendlyName { get; set; } = "ValidateCollectionBatch";

        protected readonly ILogger<ValidateCollectionBatch> _logger;
        protected readonly IRepoFactory _repoFactory;

        public ValidateCollectionBatch(ILogger<ValidateCollectionBatch> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(UpdateCollectionBatchDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            //_repoFactory.Init(packet.Dto);

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            //packet.AddError("Error", "ErrorMessage");


            //if (DictionaryInitialises.collectionInBatch.Count > 0)
            //{
            //    foreach (var collectionId in packet.Dto.CollectionIds)
            //    {
            //        if (DictionaryInitialises.collectionInBatch.ContainsValue(collectionId))
            //        {
            //            var item = DictionaryInitialises.collectionInBatch.First(kvp => kvp.Value == collectionId.ToString());
            //            DictionaryInitialises.collectionInBatch.Remove(item.Key);
            //        }
            //    }
            //}

            await Task.CompletedTask; //If you have any await in the validation, remove this line

        }

    }
}
