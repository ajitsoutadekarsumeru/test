// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.TreatmentModule.AddTreatmentTreatmentPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateTreatment : FlexiBusinessRuleBase, IFlexiBusinessRule<AddTreatmentDataPacket>
    {
        public override string Id { get; set; } = "3a1462a45bc44fdfbbca2c7841e37366";
        public override string FriendlyName { get; set; } = "ValidateTreatment";

        protected readonly ILogger<ValidateTreatment> _logger;
        protected readonly IRepoFactory _repoFactory;

        public ValidateTreatment(ILogger<ValidateTreatment> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(AddTreatmentDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);

            var treatment = await _repoFactory.GetRepo().FindAll<Treatment>()
                                        .Where(a => string.Equals(a.Name.Trim(), packet.Dto.Name) && a.IsDeleted == false)
                                        .FirstOrDefaultAsync();

            if (treatment != null)
            {
                packet.AddError("Error", "Duplicate TreatmentName " + treatment.Name);
            }

            List<SubTreatmentsInputDto> subtreatments = packet.Dto.subTreatment.ToList();

            foreach (var subtreatment in subtreatments)
            {
                if (subtreatment.POSCriteria != null && subtreatment.POSCriteria.Count() > 0)
                {
                    int? pospercentage = subtreatment.POSCriteria.Sum(a => Convert.ToInt32(a.Percentage));
                    if (pospercentage != 100)
                    {
                        packet.AddError("Error", "Please cover 100% in % of POS ");
                    }
                }
                else if (subtreatment.AccountCriteria != null && subtreatment.AccountCriteria.Count() > 0)
                {
                    int? accountpercentage = subtreatment.AccountCriteria.Sum(a => Convert.ToInt32(a.Percentage));
                    if (accountpercentage != 100)
                    {
                        packet.AddError("Error", "Please cover 100% in % of Account ");
                    }
                }
                var allocationtypecheck = subtreatments.Where(a => a.AllocationType != null && a.AllocationType != "").GroupBy(a => a.AllocationType);
                foreach (var check in allocationtypecheck)
                {
                    if (check.Count() > 1)
                    {
                        packet.AddError("Error", "Same allocationType is not allowed more than once");
                        return;
                    }
                }
            }
        }
    }
}
