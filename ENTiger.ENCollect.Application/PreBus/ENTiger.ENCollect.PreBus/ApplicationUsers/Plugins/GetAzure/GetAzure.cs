// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.ApplicationUsersModule.GetAzureApplicationUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class GetAzure : FlexiBusinessRuleBase, IFlexiBusinessRule<GetAzureDataPacket>
    {
        public override string Id { get; set; } = "3a1347a95becd6e92825e5118d8e5653";
        public override string FriendlyName { get; set; } = "GetAzure";

        protected readonly ILogger<GetAzure> _logger;
        protected readonly IRepoFactory _repoFactory;

        public GetAzure(ILogger<GetAzure> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(GetAzureDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            if (!packet.HasError)
            {
                List<FeatureMaster> features = await _repoFactory.GetRepo().FindAll<FeatureMaster>()
                                                .Where(x => x.Parameter.Contains("sso"))
                                                .ToListAsync();

                if (features != null && features.Count > 0)
                {
                    GetAzureResultModel outputModel = new GetAzureResultModel
                    {
                        Service = features.Where(x => x.Parameter.Contains("service"))
                            .Select(x => x.Value)
                            .FirstOrDefault(),
                        Url = features.Where(x => x.Parameter.Contains("url"))
                            .Select(x => x.Value)
                            .FirstOrDefault(),
                        ClientId = features.Where(x => x.Parameter.Contains("clientid"))
                            .Select(x => x.Value)
                            .FirstOrDefault(),
                        TenantId = features.Where(x => x.Parameter.Contains("tenantid"))
                            .Select(x => x.Value)
                            .FirstOrDefault()
                    };

                    packet.OutputDto = outputModel;
                }
                else
                {
                    packet.AddError("Error", "Service not available");
                }
            }
        }
    }
}
