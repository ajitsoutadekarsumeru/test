// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.Extensions.Logging;
using ENCollect.Security;
using Sumeru.Flex;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace ENTiger.ENCollect.ApplicationUsersModule.MobileLoginApplicationUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateDevice : FlexiBusinessRuleBase, IFlexiBusinessRule<MobileLoginDataPacket>
    {
        public override string Id { get; set; } = "3a13383c44e24a98d6fe7b5d4d4eb1bc";
        public override string FriendlyName { get; set; } = "ValidateDevice";

        protected readonly ILogger<ValidateDevice> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected readonly IUserUtility _userUtility;

        public ValidateDevice(ILogger<ValidateDevice> logger, IRepoFactory repoFactory, IUserUtility userUtility)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _userUtility = userUtility;
        }

        public virtual async Task Validate(MobileLoginDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            if (!packet.HasError)
            {
                string Email = string.Empty;
                string IMEI = string.Empty;
                var aesGcmKey = Encoding.UTF8.GetBytes(packet.Key);
                var aesGcmCrypto = new AesGcmCrypto();
                Email = aesGcmCrypto.Decrypt(packet.Dto.EmailId, aesGcmKey);
                IMEI = aesGcmCrypto.Decrypt(packet.Dto.IMEI, aesGcmKey);

                var appuser = await _repoFactory.GetRepo().FindAll<ApplicationUser>().Where(x => string.Equals(x.PrimaryEMail, Email) && x.IsDeleted == false).FirstOrDefaultAsync();

                if (appuser == null)
                {
                    packet.AddError("Error", "Invalid User");
                }
                else if (appuser != null)
                {
                    UserUtility userUtility;
                    string errormessage = await _userUtility.ValidateUserStatus(appuser, packet.Dto);

                    if (!string.IsNullOrEmpty(errormessage))
                    {
                        packet.AddError("Error", errormessage);
                    }
                }
                if (!packet.HasError)
                {
                    var device = await _repoFactory.GetRepo().FindAll<DeviceDetail>()
                                        .Where(a => a.Email == Email && a.IMEI == IMEI && a.IsVerified == true)
                                        .FirstOrDefaultAsync();

                    if (device == null || string.IsNullOrEmpty(device.IMEI))
                    {
                        packet.AddError("Error", "Device not registered.");
                    }
                }
            }
        }
    }
}
