// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.ApplicationUsersModule.ADLoginApplicationUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateKey : FlexiBusinessRuleBase, IFlexiBusinessRule<ADLoginDataPacket>
    {
        public override string Id { get; set; } = "3a1347a8bc32cac68e3cff1affb96911";
        public override string FriendlyName { get; set; } = "ValidateKey";

        protected readonly ILogger<ValidateKey> _logger;
        protected readonly IRepoFactory _repoFactory;
        string key = string.Empty;
        public ValidateKey(ILogger<ValidateKey> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(ADLoginDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            if (!packet.HasError)
            {
                await validate(packet, packet.Dto.ReferenceId);
                packet.Key = key;
            }
            await Task.CompletedTask; //If you have any await in the validation, remove this line
        }

        public async Task validate(FlexiFlowDataPacket packet, string Id)
        {
            _logger.LogInformation("ValidateKey : Validate - Start");

            var result = await _repoFactory.GetRepo().Find<UserLoginKeys>(Id).FirstOrDefaultAsync();
            if (result != null)
            {
                _logger.LogInformation("ValidateKey : Valid Reference");
                if (result.IsActive == false)
                {
                    _logger.LogInformation("ValidateKey : Key - IsActive : False");
                    packet.AddError("Error", "Please refresh and try again.");
                }
                else
                {
                    _logger.LogInformation("ValidateKey : Key - IsActive : True");
                    result.IsActive = false;
                    result.SetLastModifiedDate(DateTimeOffset.Now);
                    result.SetAddedOrModified();
                    _repoFactory.GetRepo().InsertOrUpdate(result);
                    await _repoFactory.GetRepo().SaveAsync();
                    key = result.Key;
                }
            }
            else
            {
                _logger.LogInformation("ValidateKey : Invalid Reference");
                packet.AddError("Error", "Invalid Request. Please contact administrator");
            }

            _logger.LogInformation("ValidateKey : Validate - End");
        }
    }
}
