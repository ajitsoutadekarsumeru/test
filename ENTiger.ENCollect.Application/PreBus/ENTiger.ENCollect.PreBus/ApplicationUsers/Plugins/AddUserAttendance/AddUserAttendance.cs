// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Serilog;
using Sumeru.Flex;

namespace ENTiger.ENCollect.ApplicationUsersModule.AddUserAttendanceApplicationUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class AddUserAttendance : FlexiBusinessRuleBase, IFlexiBusinessRule<AddUserAttendanceDataPacket>
    {
        public override string Id { get; set; } = "3a13241879d60cda3d60bcf40e4655df";
        public override string FriendlyName { get; set; } = "AddUserAttendance";

        protected readonly ILogger<AddUserAttendance> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;

        public AddUserAttendance(ILogger<AddUserAttendance> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        /// <summary>
        /// Validates and processes the user attendance packet. Closes any previous valid sessions
        /// and logs a new attendance entry for the user.
        /// </summary>
        /// <param name="packet">The attendance data packet containing user login details.</param>
        public virtual async Task Validate(AddUserAttendanceDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);
            _flexAppContext = packet.Dto.GetAppContext();
            string partyId = _flexAppContext.UserId;

            var repo = _repoFactory.GetRepo();

            // End any existing valid session
            var existingSession = await repo.FindAll<UserAttendanceLog>()
                .ByUserAttendanceLogUserId(partyId)
                .ByUserAttendanceIsSessionValid()
                .OrderByDescending(x => x.CreatedDate)
                .FirstOrDefaultAsync();

            if (existingSession != null)
            {
                _logger.LogDebug($"AddUserAttendanceFFPlugin: Ending previous session for user {partyId}");

                existingSession.IsSessionValid = false;
                existingSession.SetLastModifiedBy(partyId);
                existingSession.SetLastModifiedDate(DateTimeOffset.Now);
                existingSession.LogOutTime = packet.Dto?.LogInTime ?? DateTime.Now;
                existingSession.LogOutLatitude = packet.Dto?.LogInLatitude;
                existingSession.LogOutLongitude = packet.Dto?.LogInLongitude;
                existingSession.TransactionSource = _flexAppContext?.RequestSource;
                existingSession.SetModified();

                repo.InsertOrUpdate(existingSession);
                await repo.SaveAsync();
            }

            // Add new login session
            var newAttendance = await ConstructUserAttendanceFromModelAsync(packet.Dto, partyId);
            repo.InsertOrUpdate(newAttendance);
            await repo.SaveAsync();
        }

        /// <summary>
        /// Constructs a <see cref="UserAttendanceLog"/> based on login model data,
        /// also determines if it's the user's first login for the day.
        /// </summary>
        /// <param name="model">Login DTO with time/location/session details.</param>
        /// <param name="partyId">The ID of the user (ApplicationUserId).</param>
        /// <returns>The populated <see cref="UserAttendanceLog"/> instance.</returns>
        private async Task<UserAttendanceLog> ConstructUserAttendanceFromModelAsync(AddUserAttendanceDto model, string partyId)
        {
            var currentDate = DateTime.Now.Date;
            var repo = _repoFactory.GetRepo();

            bool hasLoggedInToday = await repo.FindAll<UserAttendanceLog>()
                                               .ByUserAttendanceLogUserId(partyId)
                                               .HasUserLoggedInToday();

            bool isFirstLogin = !hasLoggedInToday;


            _logger.LogInformation($"User {partyId} first login status for {currentDate:yyyy-MM-dd}: {isFirstLogin}");

            var login = new UserAttendanceLog
            {
                LogInTime = model?.LogInTime ?? DateTime.Now,
                LogInLatitude = model?.LogInLatitude,
                LogInLongitude = model?.LogInLongitude,
                SessionId = model?.SessionId,
                IsSessionValid = true,
                IsFirstLogin = isFirstLogin,
                ApplicationUserId = partyId,
                TransactionSource = _flexAppContext?.RequestSource
            };

            login.SetCreatedBy(partyId);
            login.SetAdded();

            return login;
        }

    }
}
