// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>
using System.Text;
using ENCollect.Security;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using Sumeru.Flex;

namespace ENTiger.ENCollect.ApplicationUsersModule.AzureLoginApplicationUsersPlugins
{
    public partial class AzureLogin : FlexiBusinessRuleBase, IFlexiBusinessRule<AzureLoginDataPacket>
    {
        public override string Id { get; set; } = "3a1347a7da5665782af223d2276d42ac";
        public override string FriendlyName { get; set; } = "AzureLogin";

        protected readonly ILogger<AzureLogin> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;
        string authUrl =  string.Empty;
        private readonly AuthSettings _authSettings;
        private readonly IApiHelper _apiHelper;

        protected string EventCondition = "";
        protected AuditEventData _auditData;
        LoginDetailsHistory loginDetailsHistory;

        protected readonly IFlexServiceBusBridge _flexServiceBusBridge;

        public AzureLogin(ILogger<AzureLogin> logger, IRepoFactory repoFactory, IOptions<AuthSettings> authSettings, IApiHelper apiHelper, IFlexServiceBusBridge flexServiceBusBridge)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _authSettings = authSettings.Value;
            _apiHelper = apiHelper;
            _flexServiceBusBridge = flexServiceBusBridge;
        }

        public virtual async Task Validate(AzureLoginDataPacket packet)
        {
            authUrl = _authSettings.AuthUrl;
            _repoFactory.Init(packet.Dto);
            _flexAppContext = packet.Dto.GetAppContext();  //do not remove this line
            string tenantId = _flexAppContext.TenantId;
            
            _logger.LogInformation("AzureLogin  : Start | TenantId - " + tenantId);
            if (!packet.HasError)
            {
                string authapiUrl = authUrl;

                string key = packet.Key;
                AzureLoginDto model = packet.Dto;
                var aesGcmCrypto = new AesGcmCrypto();
                var aesGcmKey = Encoding.UTF8.GetBytes(packet.Key);
                string userName = aesGcmCrypto.Decrypt(model.UserName, aesGcmKey);
                _logger.LogInformation("AzureLogin  : UserName - " + userName);
                if (!userName.Contains("."))
                {
                    userName = await _repoFactory.GetRepo()
                                    .FindAll<ApplicationUser>()
                                    .Where(x => x.PrimaryMobileNumber == userName)
                                    .Select(s => s.PrimaryEMail)
                                    .FirstOrDefaultAsync();
                }

                var data = new
                {
                    UserName = tenantId + "_" + userName
                };

                string jsonPayload = JsonConvert.SerializeObject(data);
                var response = await _apiHelper.SendRequestAsync(jsonPayload, authapiUrl + "/api/AccountAPI/adlogin",HttpMethod.Post);
                if (!response.IsSuccessStatusCode)
                {
                    var x = response.Content.ReadAsStringAsync().Result.Split(',');
                    LoginValidationDto value = JsonConvert.DeserializeObject<LoginValidationDto>(response.Content.ReadAsStringAsync().Result.ToString());
                    _logger.LogError("AzureLogin  : Error - " + response.Content.ReadAsStringAsync().Result.ToString());
                    packet.AddError("Error", value.error_description);
                }
                else
                {
                    var result = response.Content.ReadAsStringAsync().Result;
                    if (result != null)
                    {
                        packet.OutputDto = JsonConvert.DeserializeObject<TokenDto>(result);
                    }
                }

                await GenerateAndSendAuditEventAsync(jsonPayload,data);
            }
            _logger.LogInformation("AzureLogin  : End");
        }

        private async Task GenerateAndSendAuditEventAsync(string jsonPayload,dynamic data)
        {
            string jsonPatch = JsonConvert.SerializeObject(loginDetailsHistory);

            _auditData = new AuditEventData(
                            EntityId: data?.UserName,
                            EntityType: AuditedEntityTypeEnum.Login.Value,
                            Operation: AuditOperationEnum.Add.Value,
                            JsonPatch: jsonPatch,
                            InitiatorId: _flexAppContext?.UserId,
                            TenantId: _flexAppContext?.TenantId,
                            ClientIP: _flexAppContext?.ClientIP
                        );

            EventCondition = CONDITION_ONAUDITREQUEST;
            await this.Fire(EventCondition, new FlexServiceBusContextBridge(_flexServiceBusBridge));
        }
    }
}
