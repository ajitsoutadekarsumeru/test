// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using System.Text;
using ENTiger.ENCollect.DomainModels.Utilities;
using Microsoft.Extensions.Logging;
using ENCollect.Security;
using Sumeru.Flex;
using Microsoft.EntityFrameworkCore;

namespace ENTiger.ENCollect.ApplicationUsersModule.ForgotPasswordApplicationUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateUser : FlexiBusinessRuleBase, IFlexiBusinessRule<ForgotPasswordDataPacket>
    {
        public override string Id { get; set; } = "3a133db3193436b356301a3fee9ee984";
        public override string FriendlyName { get; set; } = "ValidateUser";

        protected readonly ILogger<ValidateUser> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected readonly IUserUtility _userUtility;

        public ValidateUser(ILogger<ValidateUser> logger, IRepoFactory repoFactory, IUserUtility userUtility)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _userUtility = userUtility;
        }

        public virtual async Task Validate(ForgotPasswordDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            if (!packet.HasError)
            {
                string Email = string.Empty;
                var aesGcmCrypto = new AesGcmCrypto();                    
                var aesGcmKey = Encoding.UTF8.GetBytes(packet.Key);
                Email = aesGcmCrypto.Decrypt(packet.Dto.Email, aesGcmKey);
                packet.Dto.Email = Email;
                var user = await _repoFactory.GetRepo().FindAll<ApplicationUser>().Where(a => a.PrimaryEMail == Email && !a.IsDeleted).FirstOrDefaultAsync();
                if (user == null)
                {
                    _logger.LogError($"Forgot Password Error: for the email {Email} - Invalid User");
                    packet.AddError("Error", "Invalid User");                    
                }
                else
                {
                    string errormessage = await _userUtility.ValidateUserStatus(user, packet.Dto);
                    if (!string.IsNullOrEmpty(errormessage))
                    {
                        _logger.LogError($"Forgot Password Error: for the email {Email} - {errormessage}");
                        packet.AddError("Error", errormessage);
                    }
                }
            }
        }
    }
}
