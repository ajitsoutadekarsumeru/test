// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using ENTiger.ENCollect.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;
using System.IO.Abstractions;

namespace ENTiger.ENCollect.AgencyModule.EditCollectionAgencyAgencyPlugins
{
    /// <summary>
    /// A business rule class that validates the agency data packet by checking the profile identification documents.
    /// </summary>
    public partial class ValidateFile : FlexiBusinessRuleBase, IFlexiBusinessRule<EditCollectionAgencyDataPacket>
    {
        /// <summary>
        /// Gets or sets the unique identifier for this validation rule.
        /// </summary>
        public override string Id { get; set; } = "3a1361962ac033d3cf216b67cdc8156f";

        /// <summary>
        /// Gets or sets the friendly name of the validation rule.
        /// </summary>
        public override string FriendlyName { get; set; } = "ValidateFile";

        private readonly ILogger<ValidateFile> _logger;
        private readonly IRepoFactory _repoFactory;

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateFile"/> class.
        /// </summary>
        /// <param name="logger">The logger instance for logging validation errors.</param>
        /// <param name="repoFactory">The repository factory to initialize the repository for database operations.</param>
        public ValidateFile(ILogger<ValidateFile> logger,
            IRepoFactory repoFactory,
            IOptions<FilePathSettings> fileSettings,
            IFileValidationUtility fileValidationUtility,
            IFileSystem fileSystem)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        /// <summary>
        /// Validates the provided agency data packet by checking the profile identification documents.
        /// </summary>
        /// <param name="packet">The packet containing agency data to be validated.</param>
        /// <returns>Asynchronous task.</returns>
        public virtual async Task Validate(EditCollectionAgencyDataPacket packet)
        {
            // Initialize the repository with the provided DTO
            _repoFactory.Init(packet.Dto);

            // Validate the agency profile identification documents
            ValidateAgencyProfileIdentificationAsync(packet);

            await Task.CompletedTask;
        }

        /// <summary>
        /// Validates the profile identification documents in the provided agency data packet.
        /// </summary>
        /// <param name="packet">The packet containing agency data with profile identification documents to be validated.</param>
        /// <returns>Asynchronous task.</returns>
        private async void ValidateAgencyProfileIdentificationAsync(EditCollectionAgencyDataPacket packet)
        {
            // Extract identification document IDs from the profileIdentification list
            var identificationDocIds = packet.Dto.ProfileIdentification.Where(x => !string.IsNullOrEmpty(x.IdentificationDocId))
                .Select(p => p.IdentificationDocId)
                .ToList();

            // Fetch valid documents from the repository that match the provided document IDs
            var validDocuments = await _repoFactory.GetRepo()
                                        .FindAll<AgencyIdentificationDoc>()
                                        .Where(doc => identificationDocIds.Contains(doc.Id))
                                        .ToListAsync();

            // Use a HashSet for fast lookup to check invalid documents
            var validDocumentIds = validDocuments.Select(doc => doc.Id).ToHashSet();
            var invalidFiles = identificationDocIds.Where(id => !validDocumentIds.Contains(id)).ToList();

            // If there are invalid files, add an error
            if (invalidFiles.Any())
            {
                packet.AddError("Error", "Invalid files. Please check the uploaded documents.");
            }
        }
    }

}