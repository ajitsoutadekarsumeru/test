// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.AgencyModule.agencygetimageAgencyPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateAgencyAccesToFile : FlexiBusinessRuleBase, IFlexiBusinessRule<agencygetimageDataPacket>
    {
        public override string Id { get; set; } = "3a1338a1905e5a38b7e96d5e62b3ad01";
        public override string FriendlyName { get; set; } = "ValidateAgencyAccesToFile";

        protected readonly ILogger<ValidateAgencyAccesToFile> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;

        public ValidateAgencyAccesToFile(ILogger<ValidateAgencyAccesToFile> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(agencygetimageDataPacket packet)
        {
            if (!packet.HasError)
            {
                //Uncomment the below line if validating against a db data using your repo
                _repoFactory.Init(packet.Dto);
                _flexAppContext = packet.Dto.GetAppContext();
                string loggedInUserId = _flexAppContext.UserId;

                string message = string.Empty;
                List<string> filesList = new List<string>();

                var user = await _repoFactory.GetRepo().Find<ApplicationUser>(loggedInUserId).FirstOrDefaultAsync();
                if (user != null && user.GetType().Name.Contains("agencyuser", StringComparison.OrdinalIgnoreCase))
                {
                    var agencyUser = await _repoFactory.GetRepo().Find<AgencyUser>(loggedInUserId).FirstOrDefaultAsync();

                    var agency = await _repoFactory.GetRepo().FindAll<Agency>()
                                    .Where(x => x.Id == agencyUser.AgencyId)
                                    .IncludeTflexIdentifications()
                                    .IncludeTFlexIdentificationDocs()
                                    .FirstOrDefaultAsync();

                    if (agency != null)
                    {
                        var docs = agency?.AgencyIdentifications;
                        var files = docs?.Select(x => x.TFlexIdentificationDocs).ToList();
                        var fileNames = files?.Select(x => x.FirstOrDefault()?.FileName).ToList();
                        if (fileNames != null && packet.Dto.FileName.Count() > 0)
                        {
                            filesList.AddRange(fileNames.ToList());
                        }
                    }
                    if (filesList.Where(x => x != null && x.Contains(packet.Dto.FileName)).Count() == 0)
                    {
                        packet.AddError("Error", "Access Denied");
                    }
                }
            }
        }  
    }
}

