// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Elastic.Clients.Elasticsearch;
using Elastic.Clients.Elasticsearch.MachineLearning;
using Elastic.Clients.Elasticsearch.Snapshot;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Text;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.PublicModule.UpdatePayuResponsePublicPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class UpdatePayment : FlexiBusinessRuleBase, IFlexiBusinessRule<UpdatePayuResponseDataPacket>
    {
        public override string Id { get; set; } = "3a14ecfaa0496a4d007a88004d666ce9";
        public override string FriendlyName { get; set; } = "UpdatePayment";

        protected readonly ILogger<UpdatePayment> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;

        public UpdatePayment(ILogger<UpdatePayment> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(UpdatePayuResponseDataPacket packet)
        {
            _flexAppContext = packet.Dto.GetAppContext();
            _repoFactory.Init(packet.Dto);

            var input = packet.Dto;
            string receiptNumber = !string.IsNullOrEmpty(packet.Dto?.description) ? packet.Dto?.description : packet.Dto?.ProductInfo;

            if (string.IsNullOrEmpty(receiptNumber))
            {
                packet.AddError("Error", "Receipt number cannot be null or empty.");
                return;
            }

            // Fetch the payment transaction using the receipt number
            PaymentTransaction transaction = await _repoFactory.GetRepo().FindAll<PaymentTransaction>()
                                                        .Where(x => x.MerchantReferenceNumber == receiptNumber)
                                                        .FirstOrDefaultAsync();
            if (transaction != null)
            {
                // Update the transaction details
               // transaction.ResponseMessage = input.data;
                transaction.BankTransactionId = input?.BankRefNo;
                transaction.TransactionStatus = input?.Status;
                transaction.IsPaid = input?.Field9 == "Transaction completed successfully" || input?.Status == "success" ? true : false;

                transaction.SetLastModifiedDate(DateTimeOffset.Now);
                transaction.SetAddedOrModified();

                _repoFactory.GetRepo().InsertOrUpdate(transaction);
                await _repoFactory.GetRepo().SaveAsync();

                // Fetch the collection using the receipt number
                Collection collection = await _repoFactory.GetRepo().FindAll<Collection>()
                                                    .Where(x => x.CustomId == receiptNumber)
                                                    .FirstOrDefaultAsync();

                if (collection != null)
                {
                    if (input?.Field9 == "Transaction completed successfully" || input?.Status == "success")
                    {
                        collection.CollectionWorkflowState = FlexOpus.GetFlexStateInstance<CollectionSuccess>();
                        collection.Status = CollectionStatusEnum.withBank.Value;
                    }
                    else
                    {
                        collection.CollectionWorkflowState.MarkCollectionAsFail();
                        collection.Status = CollectionStatusEnum.failed.Value;
                    }
                    
                    collection.SetLastModifiedDate(DateTimeOffset.Now);
                    collection.SetAddedOrModified();

                    _repoFactory.GetRepo().InsertOrUpdate(transaction);
                    await _repoFactory.GetRepo().SaveAsync();


                }
            }
            else
            {
                packet.AddError("Error", "No transaction found with the given receipt number.");
            }
        }
    }

}
