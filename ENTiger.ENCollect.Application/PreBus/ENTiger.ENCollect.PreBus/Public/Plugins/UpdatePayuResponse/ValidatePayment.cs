// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Elastic.Clients.Elasticsearch.MachineLearning;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.PublicModule.UpdatePayuResponsePublicPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidatePayment : FlexiBusinessRuleBase, IFlexiBusinessRule<UpdatePayuResponseDataPacket>
    {
        public override string Id { get; set; } = "3a14ecfaa8629205f891b5d1a1572d11";
        public override string FriendlyName { get; set; } = "ValidatePayment";

        protected readonly ILogger<ValidatePayment> _logger;
        protected readonly IRepoFactory _repoFactory;

        public ValidatePayment(ILogger<ValidatePayment> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(UpdatePayuResponseDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            FeatureMasterDtoWithId paymentDetails = new FeatureMasterDtoWithId();
            paymentDetails = await _repoFactory.GetRepo().FindAll<FeatureMaster>()
                                        .Where(a => a.Parameter.StartsWith("PGResponseSavePath"))
                                        .SelectTo<FeatureMasterDtoWithId>()
                                        .FirstOrDefaultAsync();

            await LogToFileAsync(paymentDetails.Value, packet.Dto);

            string receiptNumber = !string.IsNullOrEmpty(packet.Dto?.description) ? packet.Dto?.description : packet.Dto?.ProductInfo;

            // Check if the description is not null or empty before querying
            if (!string.IsNullOrEmpty(receiptNumber))
            {
                // Use AnyAsync() for asynchronous database check
                bool isPaymentReceiptNumberValid = await _repoFactory.GetRepo()
                                                            .FindAll<PaymentTransaction>()
                                                            .AnyAsync(x => x.MerchantReferenceNumber == receiptNumber);

                if (!isPaymentReceiptNumberValid)
                {
                    packet.AddError("Error", "Receipt Number Not Valid");
                }
            }
            else
            {
                packet.AddError("Error", "Description cannot be null or empty.");
            }
        }
        private async Task LogToFileAsync(string filePath, UpdatePayuResponseDto dto)
        {
            string dtoAsJson = JsonSerializer.Serialize(dto);
            // Define the log file name using today's date
            string logFileName = "PayuPaymentGatewayResponseLog_" + DateTime.Now.ToString("yyyyMMdd") + ".txt";

            // If filePath is empty or null, use the log file name as the default file path
            if (string.IsNullOrEmpty(filePath))
            {
                filePath = logFileName;
            }
            else
            {
                // Ensure the directory exists and construct the full file path
                if (!Directory.Exists(filePath))
                {
                    Directory.CreateDirectory(filePath);
                }

                // Combine the directory path and log file name
                filePath = Path.Combine(filePath, logFileName);
            }

            // Prepare the log content
            var logContent = new StringBuilder();
            logContent.AppendLine($"Email Log : {DateTime.Now:dd-MM-yyyy}")
                      .AppendLine("< ------------------Email Request Start ---------------- >")
                      .AppendLine($"Request DateTime : {DateTime.Now}")
                      .AppendLine($"Request Body : {dtoAsJson}")
                      .AppendLine(); // Extra new line for spacing

            // Write the log content to the file asynchronously
            await using (var writer = new StreamWriter(filePath, true))
            {
                await writer.WriteLineAsync(logContent.ToString());
            }
        }


    }
}
