// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.CompanyUsersModule.AddCompanyUserCompanyUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckDuplicateDomainId : FlexiBusinessRuleBase, IFlexiBusinessRule<AddCompanyUserDataPacket>
    {
        public override string Id { get; set; } = "3a12cbc5e132364d11c4898761755708";
        public override string FriendlyName { get; set; } = "CheckDuplicateDomainId";

        protected readonly ILogger<CheckDuplicateDomainId> _logger;
        protected readonly IRepoFactory _repoFactory;

        public CheckDuplicateDomainId(ILogger<CheckDuplicateDomainId> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(AddCompanyUserDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);

            var PartyExists = await _repoFactory.GetRepo().FindAll<CompanyUser>()
                                        .Where(p => p.DomainId == packet.Dto.DomainId)
                                        .FirstOrDefaultAsync();
            if (PartyExists != null)
            {
                packet.AddError("Error", "User already exists with the same Domain ID, please check and try again");
            }
        }
    }
}
