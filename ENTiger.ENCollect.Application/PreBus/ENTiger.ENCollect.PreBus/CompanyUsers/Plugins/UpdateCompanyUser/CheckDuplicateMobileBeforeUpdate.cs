// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.CompanyUsersModule.UpdateCompanyUserCompanyUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckDuplicateMobileBeforeUpdate : FlexiBusinessRuleBase, IFlexiBusinessRule<UpdateCompanyUserDataPacket>
    {
        public override string Id { get; set; } = "3a12da527fe90af15604a7fb589f1e02";
        public override string FriendlyName { get; set; } = "CheckDuplicateMobileBeforeUpdate";

        protected readonly ILogger<CheckDuplicateMobileBeforeUpdate> _logger;
        protected readonly IRepoFactory _repoFactory;

        public CheckDuplicateMobileBeforeUpdate(ILogger<CheckDuplicateMobileBeforeUpdate> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(UpdateCompanyUserDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);

            //If any validation fails, uncomment and use the below line of code to add error to the packet
            var PartyExists = await _repoFactory.GetRepo().FindAll<ApplicationUser>()
                                        .Where(p => p.PrimaryMobileNumber == packet.Dto.PrimaryMobileNumber)
                                        .FirstOrDefaultAsync();

            if (PartyExists != null && PartyExists.Id != packet.Dto.Id)
            {
                packet.AddError("Error", "Mobile Number already exists");
            }
        }
    }
}
