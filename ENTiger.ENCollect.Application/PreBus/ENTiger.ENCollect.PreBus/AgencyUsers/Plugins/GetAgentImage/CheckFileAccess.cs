// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.AgencyUsersModule.GetAgentImageAgencyUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckFileAccess : FlexiBusinessRuleBase, IFlexiBusinessRule<GetAgentImageDataPacket>
    {
        public override string Id { get; set; } = "3a13ba41540ce593e174a5cc01575a10";
        public override string FriendlyName { get; set; } = "CheckFileAccess";

        protected readonly ILogger<CheckFileAccess> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;

        public CheckFileAccess(ILogger<CheckFileAccess> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(GetAgentImageDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);
            _flexAppContext = packet.Dto.GetAppContext();  //do not remove this line

            string userId = _flexAppContext.UserId;
            List<string> filesList = new List<string>();

            var user = await _repoFactory.GetRepo().FindAll<ApplicationUser>().Where(x => x.Id == userId).FirstOrDefaultAsync();
            switch (user)
            {
                case AgencyUser AgencyUser:
                    var agencyUser = await _repoFactory.GetRepo().FindAll<AgencyUser>().Where(x => x.Id == userId).FirstOrDefaultAsync();

                    var users = await _repoFactory.GetRepo().FindAll<AgencyUser>()
                                    .Where(x => x.AgencyId == agencyUser.AgencyId)
                                    .IncludeAgencyUserIdentifications()
                                    .IncludeAgencyUserIdentificationDocs()
                                    .ToListAsync();

                    if (users != null && users.Count() > 0)
                    {
                        filesList.AddRange(users.Select(x => x.ProfileImage).ToList());

                        foreach (var obj in users)
                        {
                            var docs = obj?.AgencyUserIdentifications;
                            var files = docs?.Select(x => x.TFlexIdentificationDocs).ToList();
                            var fileNames = files?.Select(x => x.FirstOrDefault()?.FileName).ToList();
                            if (fileNames != null && fileNames.Count() > 0)
                            {
                                filesList.AddRange(fileNames.ToList());
                            }
                        }
                    }
                    if (filesList.Where(x => x != null && x.Contains(packet.Dto.FileName)).Count() == 0)
                    {
                        _logger.LogError("CheckFileAccess : Access Denied");
                        packet.AddError("Error", "Access Denied");
                    }
                    break;

                case CompanyUser CompanyUser:
                    break;

                default:
                    break;
            }
        }
    }
}
