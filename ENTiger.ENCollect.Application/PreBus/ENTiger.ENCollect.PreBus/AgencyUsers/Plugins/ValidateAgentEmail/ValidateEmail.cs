// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using DocumentFormat.OpenXml.Bibliography;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.AgencyUsersModule.ValidateAgentEmailAgencyUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateEmail : FlexiBusinessRuleBase, IFlexiBusinessRule<ValidateAgentEmailDataPacket>
    {
        public override string Id { get; set; } = "3a1486bf2b6751e98a56242059b1fb60";
        public override string FriendlyName { get; set; } = "ValidateEmail";

        protected readonly ILogger<ValidateEmail> _logger;
        protected readonly IRepoFactory _repoFactory;
        private readonly ICustomUtility _customUtility;

        public ValidateEmail(ILogger<ValidateEmail> logger, IRepoFactory repoFactory, ICustomUtility customUtility)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _customUtility = customUtility;
        }

        public virtual async Task Validate(ValidateAgentEmailDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);
            List<AgentEmailDto> agentlist = new List<AgentEmailDto>();
            _logger.LogInformation("ValidateEmail Started");

            if (!string.IsNullOrEmpty(packet.Dto.EmailId))
            {
                var StaffPartyExists = await _repoFactory.GetRepo().FindAll<ApplicationUser>()
                                            .Where(p => p.PrimaryEMail == packet.Dto.EmailId &&
                                                    p.GetType() == typeof(CompanyUser))
                                            .FirstOrDefaultAsync();

                if (StaffPartyExists != null)
                {
                    packet.AddError("Error", "Staffuser already exist for same email id");
                }
                else
                {
                    AgencyUserWorkflowState state = WorkflowStateFactory.GetCollectionAgencyUserWFState("disabled");

                    agentlist = await _repoFactory.GetRepo().FindAll<AgencyUser>()
                                        .IncludeAgencyUserWorkflow()
                                        .Where(p => p.PrimaryEMail == packet.Dto.EmailId &&
                                                p.AgencyUserWorkflowState.Name == state.Name &&
                                                p.UserId != null)
                                        .SelectTo<AgentEmailDto>()
                                        .ToListAsync();

                    _logger.LogInformation("After get agent details");

                    var departments = await _repoFactory.GetRepo().FindAll<Department>().ToListAsync();
                    var designations = await _repoFactory.GetRepo().FindAll<Designation>().ToListAsync();
                    _logger.LogInformation("After get departments and designations details");

                    if (agentlist.Count > 0)
                    {
                        foreach (var agents in agentlist)
                        {
                            agents.AgencyName = _customUtility.FullMaskValueFunc(agents.AgencyName);

                            foreach (var designation in agents.Roles)
                            {
                                var design = designations.Where(x => x.Id == designation.DesignationId).FirstOrDefault();
                                if (design != null)
                                {
                                    designation.DesignationId = design.Name;
                                }
                                var dept = departments.Where(x => x.Id == designation.DepartmentId).FirstOrDefault();
                                if (dept != null)
                                {
                                    designation.DepartmentId = dept.Name;
                                }
                            }
                        }
                    }
                    else
                    {
                        var PartyExists = await _repoFactory.GetRepo().FindAll<AgencyUser>()
                                                .IncludeAgencyUserWorkflow()
                                                .Where(p => p.PrimaryEMail == packet.Dto.EmailId &&
                                                            p.AgencyUserWorkflowState.Name != state.Name &&
                                                            p.UserId != null &&
                                                            p.IsDeleted == false)
                                                .FirstOrDefaultAsync();

                        _logger.LogInformation("ValidateEmail : record exist for email " + PartyExists?.PrimaryEMail);
                        if (PartyExists != null)
                        {
                            packet.AddError("Error", "Email Id already exists");
                        }
                    }
                }
               
                packet.OutputDto = agentlist;
            }
        }
    }
}
