// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using ENTiger.ENCollect.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;
using System.IO.Abstractions;

namespace ENTiger.ENCollect.AgencyUsersModule.AddAgentAgencyUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateFile : FlexiBusinessRuleBase, IFlexiBusinessRule<AddAgentDataPacket>
    {
        public override string Id { get; set; } = "3a1361962ac033d3cf216b67cdc8156f";
        public override string FriendlyName { get; set; } = "ValidateFile";
        protected readonly IFileSystem _fileSystem;
        protected readonly ILogger<ValidateFile> _logger;
        protected readonly IRepoFactory _repoFactory;
        private readonly IFileValidationUtility _fileValidationUtility;
        private readonly FilePathSettings _fileSettings;
        public ValidateFile(ILogger<ValidateFile> logger,
            IRepoFactory repoFactory,
            IFileValidationUtility fileValidationUtility,
            IOptions<FilePathSettings> fileSettings,
            IFileSystem fileSystem)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _fileValidationUtility = fileValidationUtility;
            _fileSettings = fileSettings.Value;
            _fileSystem = fileSystem;
        }

        /// <summary>
        /// Validates the provided agent data packet by checking the profile image and profile identification documents.
        /// </summary>
        /// <param name="packet">The packet containing agent data to be validated.</param>
        /// <returns>Asynchronous task.</returns>
        public virtual async Task Validate(AddAgentDataPacket packet)
        {
            // Initialize the repository with the DTO
            _repoFactory.Init(packet.Dto);

            // Validate the profile image file
            ValidateProfileImage(packet);

            // Validate profile identification documents
            ValidateAgentProfileIdentificationAsync(packet);
        }

        /// <summary>
        /// Validates the profile image file in the provided agent data packet.
        /// </summary>
        /// <param name="packet">The packet containing agent data with profile image to be validated.</param>
        private void ValidateProfileImage(AddAgentDataPacket packet)
        {
            // Combine the base path and incoming path to get the full directory path
            string filePath = _fileSystem.Path.Combine(_fileSettings.BasePath, _fileSettings.IncomingPath);

            // Check if the profile image is null or empty, or if the file doesn't exist in the given path
            if (string.IsNullOrEmpty(packet.Dto.ProfileImage) ||
                !_fileValidationUtility.CheckIfFileExists(filePath, packet.Dto.ProfileImage))
            {
                packet.AddError("Error", "Invalid uploaded profile image.");
            }
        }

        /// <summary>
        /// Validates the profile identification documents in the provided agent data packet.
        /// </summary>
        /// <param name="packet">The packet containing agent data with profile identification documents to be validated.</param>
        /// <returns>Asynchronous task.</returns>
        private async void ValidateAgentProfileIdentificationAsync(AddAgentDataPacket packet)
        {
            // Extract identification document IDs from the profileIdentification list
            var identificationDocIds = packet.Dto.profileIdentification.Where(x => !string.IsNullOrEmpty(x.IdentificationDocId))
                .Select(p => p.IdentificationDocId)
                .ToList();

            // Fetch valid documents from the repository that match the provided document IDs
            var validDocuments = await _repoFactory.GetRepo()
                                    .FindAll<AgencyUserIdentificationDoc>()
                                    .Where(doc => identificationDocIds.Contains(doc.Id))
                                    .ToListAsync();

            // Use a HashSet for fast lookup to check invalid documents
            var validDocumentIds = validDocuments.Select(doc => doc.Id).ToHashSet();
            var invalidFiles = identificationDocIds.Where(id => !validDocumentIds.Contains(id)).ToList();

            // If there are invalid files, add an error
            if (invalidFiles.Any())
            {
                packet.AddError("Error", "Invalid files. Please check the uploaded documents.");
            }
        }
    }
}