// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.AgencyUsersModule.AddAgentAgencyUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckDuplicateEmail : FlexiBusinessRuleBase, IFlexiBusinessRule<AddAgentDataPacket>
    {
        public override string Id { get; set; } = "3a12d148d9ac2f3b4c1206773c27416d";
        public override string FriendlyName { get; set; } = "CheckDuplicateEmail";

        protected readonly ILogger<CheckDuplicateEmail> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;

        public CheckDuplicateEmail(ILogger<CheckDuplicateEmail> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(AddAgentDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _flexAppContext = packet.Dto.GetAppContext();
            _repoFactory.Init(packet.Dto);

            if (!packet.HasError)
            {
                if (!string.IsNullOrEmpty(packet.Dto.PrimaryEMail))
                {
                    var PartyExists = await _repoFactory.GetRepo().FindAll<ApplicationUser>()
                                            .Where(p => p.PrimaryEMail == packet.Dto.PrimaryEMail &&
                                                    p.GetType() == typeof(CompanyUser))
                                            .FirstOrDefaultAsync();

                    if (PartyExists != null)
                    {
                        packet.AddError("Error", "Staffuser already exist for same email id");
                    }
                }
                if (!packet.HasError)
                {
                    if (string.IsNullOrEmpty(packet.Dto.overwriteAgentId))
                    {
                        var PartyExists = await _repoFactory.GetRepo().FindAll<AgencyUser>()
                                                        .Where(p => p.PrimaryEMail == packet.Dto.PrimaryEMail)
                                                        .FirstOrDefaultAsync();
                        if (PartyExists != null)
                        {
                            packet.AddError("Error", "Email Id already exists");
                        }
                    }
                    else
                    {
                        AgencyUserWorkflowState state = WorkflowStateFactory.GetCollectionAgencyUserWFState("disabled");

                        var PartyExists = await _repoFactory.GetRepo().FindAll<AgencyUser>()
                                                    .IncludeAgencyUserWorkflow()
                                                    .Where(p => p.PrimaryEMail == packet.Dto.PrimaryEMail &&
                                                                p.Id != packet.Dto.overwriteAgentId &&
                                                                p.AgencyUserWorkflowState.Name != state.Name &&
                                                                p.UserId != null && p.IsDeleted == false)
                                                    .FirstOrDefaultAsync();

                        if (PartyExists != null)
                        {
                            packet.AddError("Error", "Email Id already exists");
                        }
                    }
                }
            }
        }
    }
}
