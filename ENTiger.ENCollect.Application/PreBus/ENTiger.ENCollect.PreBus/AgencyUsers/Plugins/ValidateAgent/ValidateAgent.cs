// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.AgencyUsersModule.ValidateAgentAgencyUsersPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateAgent : FlexiBusinessRuleBase, IFlexiBusinessRule<ValidateAgentDataPacket>
    {
        public override string Id { get; set; } = "3a1486c155994b36c2425779405039da";
        public override string FriendlyName { get; set; } = "ValidateAgent";

        protected readonly ILogger<ValidateAgent> _logger;
        protected readonly IRepoFactory _repoFactory;
        private readonly ICustomUtility _customUtility;

        public ValidateAgent(ILogger<ValidateAgent> logger, IRepoFactory repoFactory, ICustomUtility customUtility)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _customUtility = customUtility;
        }

        public virtual async Task Validate(ValidateAgentDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);
            List<AgentDto> agentlist = new List<AgentDto>();
            _logger.LogInformation("ValidateAgent Started");
            _logger.LogInformation("ValidateEmail Started");

            if (!string.IsNullOrEmpty(packet.Dto.EmailId) && (!string.IsNullOrEmpty(packet.Dto.MobileNo)))
            {
                AgencyUserWorkflowState state = WorkflowStateFactory.GetCollectionAgencyUserWFState("disabled");

                agentlist = await _repoFactory.GetRepo().FindAll<AgencyUser>().IncludeAgencyUserWorkflow()
                                .Where(p => (p.PrimaryEMail == packet.Dto.EmailId || p.PrimaryMobileNumber == packet.Dto.MobileNo) 
                                &&p.AgencyUserWorkflowState.Name == state.Name && p.UserId != null)
                                .SelectTo<AgentDto>().ToListAsync();

                _logger.LogInformation("After get agent details");

                var departments = await _repoFactory.GetRepo().FindAll<Department>().ToListAsync();
                var designations = await _repoFactory.GetRepo().FindAll<Designation>().ToListAsync();
                _logger.LogInformation("After get departments and designations details");

                foreach (var agents in agentlist)
                {                   
                    foreach (var designation in agents.Roles)
                    {
                        agents.AgencyName = _customUtility.FullMaskValueFunc(agents.AgencyName);

                        var design = designations.Where(x => x.Id == designation.DesignationId).FirstOrDefault();
                        if (design != null)
                        {
                            designation.DesignationId = design.Name;
                        }
                        var dept = departments.Where(x => x.Id == designation.DepartmentId).FirstOrDefault();
                        if (dept != null)
                        {
                            designation.DepartmentId = dept.Name;
                        }
                    }
                }
                await Task.CompletedTask;
            }
           
            packet.OutputDto = agentlist;
        }
    }
}
