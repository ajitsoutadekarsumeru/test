// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using ENTiger.ENCollect.DomainModels;
using ENTiger.ENCollect.DomainModels.Utilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;
using System.IO.Abstractions;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.AllocationModule.PrimaryAllocationByBatchAllocationPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidatePrimaryAllocation : FlexiBusinessRuleBase, IFlexiBusinessRule<PrimaryAllocationByBatchDataPacket>
    {
        public override string Id { get; set; } = "3a139de1deff2980898a90f20d9fa9a6";
        public override string FriendlyName { get; set; } = "ValidatePrimaryAllocation";
        protected readonly IFileSystem _fileSystem;
        protected readonly ILogger<ValidatePrimaryAllocation> _logger;
        protected readonly IRepoFactory _repoFactory;
        
        private readonly FilePathSettings _fileSettings;
        private readonly IFileValidationUtility _fileValidationUtility;
        public ValidatePrimaryAllocation(
            ILogger<ValidatePrimaryAllocation> logger, 
            IRepoFactory repoFactory, 
            IOptions<FilePathSettings> fileSettings, 
            IFileValidationUtility fileValidationUtility,
            IFileSystem fileSystem)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _fileSettings = fileSettings.Value;
            _fileValidationUtility = fileValidationUtility;
            _fileSystem = fileSystem;
        }

        public virtual async Task Validate(PrimaryAllocationByBatchDataPacket packet)
        {
            _repoFactory.Init(packet.Dto);
            string _filepath = _fileSystem.Path.Combine(_fileSettings.BasePath, _fileSettings.IncomingPath);
            if (!_fileValidationUtility.CheckIfFileExists(_filepath, packet.Dto.AllocationFileName))
            {
                packet.AddError("Error", "Invalid File");
            }
            await Task.CompletedTask;
        }
    }
}
