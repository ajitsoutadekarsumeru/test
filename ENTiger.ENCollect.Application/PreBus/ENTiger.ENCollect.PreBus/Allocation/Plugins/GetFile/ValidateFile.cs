// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using ENTiger.ENCollect.DomainModels;
using ENTiger.ENCollect.DomainModels.Reports;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;
using System.IO.Abstractions;
using System.Threading.Tasks;

namespace ENTiger.ENCollect.AllocationModule.GetFileAllocationPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ValidateFile : FlexiBusinessRuleBase, IFlexiBusinessRule<GetFileDataPacket>
    {
        public override string Id { get; set; } = "3a13ffd4599b1c4435c4c6cafe0c7b08";
        public override string FriendlyName { get; set; } = "ValidateFile";

        protected readonly ILogger<ValidateFile> _logger;
        protected readonly IRepoFactory _repoFactory;
        private readonly IFileValidationUtility _fileValidationUtility;
        private readonly IFileSystem _fileSystem;
        private readonly FilePathSettings _filePathSettings;
        private readonly FileConfigurationSettings _fileConfigurationSettings;
        public ValidateFile(ILogger<ValidateFile> logger, IRepoFactory repoFactory, IFileValidationUtility fileValidationUtility, IFileSystem fileSystem, IOptions<FilePathSettings> filePathSettings, IOptions<FileConfigurationSettings> fileConfigurationSettings)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _fileValidationUtility = fileValidationUtility;
            _fileSystem = fileSystem;
            _filePathSettings = filePathSettings.Value;
            _fileConfigurationSettings = fileConfigurationSettings.Value;
        }

        public virtual async Task Validate(GetFileDataPacket packet)
        {

            _repoFactory.Init(packet.Dto);

            InsightDownloadFile insightDownloadFile = _repoFactory.GetRepo().FindAll<InsightDownloadFile>().Where(a => a.CustomId == packet.Dto.TransactionId).FirstOrDefault();
            if (insightDownloadFile == null)
            {
                packet.AddError("Error", "Invalid TransactionId");
            }
            else
            {
                
                        string filePath = insightDownloadFile.FilePath;

                        if (!_fileValidationUtility.ValidateReportDownloadFile(insightDownloadFile.FileName, out string message, filePath))
                        {
                            packet.AddError("Error", message);
                        }
                        else
                        {
                            packet.FilePath = filePath;
                            packet.Dto.FileName = insightDownloadFile.FileName;
                            packet.Dto.FilePath = insightDownloadFile.FilePath;
                        }
                    
                
            }

            await Task.CompletedTask; //If you have any await in the validation, remove this line
        }
    }
}
