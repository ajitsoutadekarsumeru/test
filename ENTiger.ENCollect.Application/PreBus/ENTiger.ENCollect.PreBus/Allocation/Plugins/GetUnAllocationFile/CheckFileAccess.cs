// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;

namespace ENTiger.ENCollect.AllocationModule.GetUnAllocationFileAllocationPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckFileAccess : FlexiBusinessRuleBase, IFlexiBusinessRule<GetUnAllocationFileDataPacket>
    {
        public override string Id { get; set; } = "3a1816dcafa7b2dda3762998a8719b0a";
        public override string FriendlyName { get; set; } = "CheckFileAccess";

        protected readonly ILogger<CheckFileAccess> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;
        private readonly FileConfigurationSettings _fileConfigurationSettings;
        public CheckFileAccess(ILogger<CheckFileAccess> logger, IRepoFactory repoFactory, IOptions<FileConfigurationSettings> fileConfigurationSettings)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _fileConfigurationSettings = fileConfigurationSettings.Value;
        }

        public virtual async Task Validate(GetUnAllocationFileDataPacket packet)
        {
            string FileExtension = _fileConfigurationSettings.DefaultExtension;
            if (!packet.HasError)
            {
                _repoFactory.Init(packet.Dto);
                _flexAppContext = packet.Dto.GetAppContext();  //do not remove this line

                string userId = _flexAppContext.UserId;
                List<string> filesList = new List<string>();

                var primaryFiles = await _repoFactory.GetRepo().FindAll<PrimaryUnAllocationFile>()
                                    .Where(x => x.CreatedBy == userId &&
                                        (x.FileName == packet.Dto.FileName || x.CustomId + FileExtension == packet.Dto.FileName))
                                    .ToListAsync();

                if (primaryFiles != null && primaryFiles.Count() > 0)
                {
                    filesList.AddRange(primaryFiles.Select(x => x.FileName).ToList());
                    filesList.AddRange(primaryFiles.Select(x => x.CustomId + FileExtension).ToList());
                }
                var secondaryFiles = await _repoFactory.GetRepo().FindAll<SecondaryUnAllocationFile>()
                                        .Where(x => x.CreatedBy == userId &&
                                            (x.FileName == packet.Dto.FileName || x.CustomId + FileExtension == packet.Dto.FileName))
                                        .ToListAsync();

                if (secondaryFiles != null && secondaryFiles.Count() > 0)
                {
                    filesList.AddRange(secondaryFiles.Select(x => x.FileName).ToList());
                    filesList.AddRange(secondaryFiles.Select(x => x.CustomId + FileExtension).ToList());
                }
                if (filesList.Where(x => x != null && x.Contains(packet.Dto.FileName)).Count() == 0)
                {
                    _logger.LogError("CheckFileAccess : Access Denied");
                    packet.AddError("Error", "Access Denied");
                }
            }
        }
    }
}
