// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Sumeru.Flex;

namespace ENTiger.ENCollect.FeedbackModule.GetTrailFileFeedbackPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckFileAccess : FlexiBusinessRuleBase, IFlexiBusinessRule<GetTrailFileDataPacket>
    {
        public override string Id { get; set; } = "3a1816dd0febc787572f308873c549d4";
        public override string FriendlyName { get; set; } = "CheckFileAccess";

        protected readonly ILogger<CheckFileAccess> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;
        private readonly FileConfigurationSettings _fileConfigurationSettings;

        public CheckFileAccess(ILogger<CheckFileAccess> logger, IRepoFactory repoFactory, IOptions<FileConfigurationSettings> fileConfigurationSettings)
        {
            _logger = logger;
            _repoFactory = repoFactory;
            _fileConfigurationSettings = fileConfigurationSettings.Value;
        }

        public virtual async Task Validate(GetTrailFileDataPacket packet)
        {
            string FileExtension = _fileConfigurationSettings.DefaultExtension;
            if (!packet.HasError)
            {
                _repoFactory.Init(packet.Dto);
                _flexAppContext = packet.Dto.GetAppContext();  //do not remove this line

                string userId = _flexAppContext.UserId;

                var trailFiles = await _repoFactory.GetRepo().FindAll<BulkTrailUploadFile>()
                                    .Where(x => x.CreatedBy == userId &&
                                                (x.FileName == packet.Dto.FileName || x.CustomId + FileExtension == packet.Dto.FileName))
                                    .ToListAsync();
               
                if (trailFiles == null || trailFiles.Count() == 0)
                {
                    _logger.LogError("CheckFileAccess : Access Denied");
                    packet.AddError("Error", "Access Denied");
                }
            }
        }
    }
}
