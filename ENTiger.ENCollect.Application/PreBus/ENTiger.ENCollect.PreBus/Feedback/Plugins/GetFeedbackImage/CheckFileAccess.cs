// <auto-generated>
//     This code was generated by Sumeru FlexGen.
//     Template Version: TemplateVersion
//
//     Do not rename the file
//     TODO:
//     Implement your validations in the Validate(..) method.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sumeru.Flex;

namespace ENTiger.ENCollect.FeedbackModule.GetFeedbackImageFeedbackPlugins
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CheckFileAccess : FlexiBusinessRuleBase, IFlexiBusinessRule<GetFeedbackImageDataPacket>
    {
        public override string Id { get; set; } = "3a1366880ad107132afdeff11844a08e";
        public override string FriendlyName { get; set; } = "CheckFileAccess";

        protected readonly ILogger<CheckFileAccess> _logger;
        protected readonly IRepoFactory _repoFactory;
        protected FlexAppContextBridge? _flexAppContext;

        public CheckFileAccess(ILogger<CheckFileAccess> logger, IRepoFactory repoFactory)
        {
            _logger = logger;
            _repoFactory = repoFactory;
        }

        public virtual async Task Validate(GetFeedbackImageDataPacket packet)
        {
            //Uncomment the below line if validating against a db data using your repo
            _repoFactory.Init(packet.Dto);
            _flexAppContext = packet.Dto.GetAppContext();  //do not remove this line

            string userId = _flexAppContext.UserId;
            List<string> filesList = new List<string>();

            var user = await _repoFactory.GetRepo().FindAll<ApplicationUser>()
                                        .Where(x => x.Id == userId)
                                        .FirstOrDefaultAsync();

            if (user.GetType().Name.Contains("AgencyUser", StringComparison.OrdinalIgnoreCase))
            {
                var agencyUser = await _repoFactory.GetRepo().FindAll<AgencyUser>().Where(x => x.Id == userId).FirstOrDefaultAsync();

                var feedbacks = await _repoFactory.GetRepo().FindAll<Feedback>().Where(x => x.CreatedBy == agencyUser.Id).ToListAsync();
                if (feedbacks != null && feedbacks.Count() > 0)
                {
                    filesList.AddRange(feedbacks.Select(x => x.UploadedFileName).ToList());
                }
                if (filesList.Where(x => x != null && x.Contains(packet.Dto.FileName)).Count() == 0)
                {
                    _logger.LogError("CheckFileAccess : Access Denied");
                    packet.AddError("Error", "Access Denied");
                }
            }
        }
    }
}
